---

- name: Check if drupal 8 is already initialized on database
  shell: >-
    export PGPASSWORD='{{ drupal_database_password }}';
    psql -h {{ drupal_database_server }}
    -tAc "SELECT 1 FROM pg_tables WHERE schemaname='public' AND tablename='node'" {{ drupal_database_name }} {{ drupal_database_username }}
  no_log: true
  register: drupal8_database_initialized
  tags:
    - skip_ansible_lint

- name: Install a clean Drupal database
  shell: >-
    {{ drupal_drush_path }} site-install -y standard
    --db-url=pgsql://{{ drupal_db_connection_string }}/{{ drupal_database_name }}
    --account-name={{ drupal_admin_username }}
    --account-pass={{ drupal_admin_password }}
    --site-name={{ drupal_site_name }}
  args:
    chdir: "{{ drupal_root }}"
  no_log: true
  when: "'1' not in drupal8_database_initialized.stdout"
  tags:
    - skip_ansible_lint

- name: Copy Drupal settings
  template:
    src: settings.php.j2
    dest: "{{ drupal_root }}/web/sites/default/settings.php"
    owner: "{{ drupal_user }}"
    group: "{{ drupal_group }}"
    mode: 0444
  when: drupal_root is defined

- name: Check enabled drupal modules
  shell: "{{ drupal_drush_path }} pml --status enabled --field=name"
  args:
    chdir: "{{ drupal_root }}"
  changed_when: false
  check_mode: false
  register: drupal_enabled_modules
  tags:
    - skip_ansible_lint

### Translations ###

- name: Enable Drupal language modules
  shell: "{{ drupal_drush_path }} en -y {{ item }}"
  args:
    chdir: "{{ drupal_root }}"
  with_items: "{{ drupal_language_modules }}"
  when: item not in drupal_enabled_modules.stdout
  tags:
    - skip_ansible_lint

- name: Check languages added to drupal
  shell: "{{ drupal_drush_path }} language-info --field=language"
  args:
    chdir: "{{ drupal_root }}"
  changed_when: false
  check_mode: false
  register: drupal_languages_added
  tags:
    - skip_ansible_lint

- name: Add additional languages
  shell: "{{ drupal_drush_path }} language-add -y {{ item }}"
  args:
    chdir: "{{ drupal_root }}"
  with_items:
    - fi
    - sv
  when: item not in drupal_languages_added.stdout
  tags:
    - skip_ansible_lint

- name: Make Finnish default language
  shell: ./vendor/bin/drush language-default -y fi
  args:
    chdir: "{{ drupal_root }}"
  tags:
    - skip_ansible_lint

### Theme ###

- name: Enable base theme
  shell: "{{ drupal_drush_path }} then -y bootstrap"
  args:
    chdir: "{{ drupal_root }}"
  tags:
    - skip_ansible_lint

### Install external modules ###

# Disable removed modules, modules must be removed from removed_extensions
# after they are removed from composer.json
- name: Disable drupal modules
  shell: "{{ drupal_drush_path }} pm:uninstall -y {{ item }}"
  args:
    chdir: "{{ drupal_root }}"
  with_items: "{{ drupal_removed_extensions }}"
  when:
    - "drupal_removed_extensions is defined"
    - item in drupal_enabled_modules.stdout
  tags:
    - skip_ansible_lint

- name: Enable Drupal extra modules
  shell: "{{ drupal_drush_path }} en -y {{ item }}"
  args:
    chdir: "{{ drupal_root }}"
  with_items:
    - twig_tweak
    - fontawesome_menu_icons
    - smtp
    - pathauto  ### Used for URL alias settings
    - easy_breadcrumb
    - twig_field_value
    - disqus
    - recaptcha
    - redirect
    - search_api
    - search_api_db
    - search_api_db_defaults
    - google_analytics
    - token
    - metatag
    - metatag_open_graph
    - ape
    - honeypot
    - registration_validation
  when: item not in drupal_enabled_modules.stdout
  tags:
    - skip_ansible_lint

# These need to be enabled after installing external modules (at least pathauto), because
# of dependencies.
- name: Enable custom modules
  shell: "{{ drupal_drush_path }} en -y {{ item.machine_name }}"
  args:
    chdir: "{{ drupal_root }}"
  with_items: "{{ drupal_custom_modules }}"
  when: item.machine_name not in drupal_enabled_modules.stdout
  tags:
    - skip_ansible_lint

# Some configurations need to be removed to avoid conflicts at the next step
# To avoid failure with clean installs, error about trying to remove a non-existing
# configuration is ignored. As a result, it is important to carefully check the
# spelling of configurations.
- name: Delete existing configurations
  shell: "{{ drupal_drush_path }} config-delete {{ item }}"
  register: result
  failed_when:
    - result.rc == 1 and 'Config {{ item }} does not exist' not in result.stderr
  args:
    chdir: "{{ drupal_root }}"
  with_items:
    - easy_breadcrumb.settings
    - node.type.page
    - core.entity_form_display.node.page.default
    - core.entity_view_display.node.page.default
    - pathauto.settings
    - captcha.captcha_point.contact_message_feedback_form
    - core.base_field_override.node.article.promote
    - editor.editor.full_html
    - block.block.avoindata_collapsiblesearch
    - block.block.avoindata_infobox
  tags:
    - skip_ansible_lint

- name: Symlink custom theme
  file:
    state: link
    src: "{{ drupal_server_path }}/avoindata-drupal-theme/"
    dest: "{{ drupal_root }}/web/themes/avoindata"
    force: true

- name: Symlink custom ckeditor plugin styles
  file:
    state: link
    src: "{{ drupal_server_path }}/avoindata-drupal-ckeditor-plugins/css"
    dest: "{{ drupal_root }}/web/modules/avoindata-ckeditor-plugins/css"
    force: true
  when: drupal_deployment_environment_id != "vagrant"

# Not symlinked because nested symlinks don't work on windows
- name: Synchronize fonts
  synchronize:
    src: "{{ item }}"
    dest: "{{ drupal_root }}/web/themes/avoindata/fonts"
  with_items:
    - /var/www/resources/vendor/@fortawesome/fontawesome/webfonts/
    - /var/www/resources/vendor/bootstrap/dist/fonts/
  delegate_to: "{{ inventory_hostname }}"

- name: Enable custom theme
  shell: "{{ drupal_drush_path }} then -y avoindata"
  args:
    chdir: "{{ drupal_root }}"
  tags:
    - skip_ansible_lint

- name: Set default theme
  shell: "{{ drupal_drush_path }} config-set -y system.theme default avoindata"
  args:
    chdir: "{{ drupal_root }}"
  tags:
    - skip_ansible_lint

- name: Reload theme configurations
  shell: "{{ drupal_drush_path }} -y cim --partial --source {{ drupal_root }}/web/themes/avoindata/config/install"
  args:
    chdir: "{{ drupal_root }}"
  tags:
    - skip_ansible_lint

- name: Reload custom module configurations
  shell: "{{ drupal_drush_path }} -y cim --partial --source {{ drupal_root }}/web/modules/{{ item.module_name }}/config/install"
  register: result
  failed_when:
    - result.rc == 1 and 'The source directory does not exist. The source is not a directory.' not in result.stderr and 'already exists' not in result.stderr
  args:
    chdir: "{{ drupal_root }}"
  with_items:
    - "{{ drupal_custom_modules }}"
  tags:
    - skip_ansible_lint

- name: Copy setting template files
  template:
    src: "drupal_site_config/{{ item.src }}"
    dest: "{{ drupal_root }}/site_config/{{ item.dest }}"
  with_items:
    - { src: system.mail.yml.j2, dest: system.mail.yml }
    - { src: smtp.settings.yml.j2, dest: smtp.settings.yml }
    - { src: disqus.settings.yml.j2, dest: disqus.settings.yml }
    - { src: user.settings.yml.j2, dest: user.settings.yml }
    - { src: captcha.settings.yml.j2, dest: captcha.settings.yml }
    - { src: captcha.captcha_point.user_register_form.yml.j2, dest: captcha.captcha_point.user_register_form.yml }
    - { src: recaptcha.settings.yml.j2, dest: recaptcha.settings.yml }
    - { src: registration_validation.settings.yml.j2, dest: registration_validation.settings.yml }
    - { src: fontawesome.settings.yml.j2, dest: fontawesome.settings.yml }
    - { src: search_api.server.default_server.yml.j2, dest: search_api.server.default_server.yml }
    - { src: google_analytics.settings.yml.j2, dest: google_analytics.settings.yml }
    - { src: update.settings.yml.j2, dest: update.settings.yml }
    - { src: metatag.settings.yml.j2, dest: metatag.settings.yml }
    - { src: metatag.metatag_defaults.front.yml.j2, dest: metatag.metatag_defaults.front.yml }
    - { src: metatag.metatag_defaults.global.yml.j2, dest: metatag.metatag_defaults.global.yml }
    - { src: metatag.metatag_defaults.node__avoindata_article.yml.j2, dest: metatag.metatag_defaults.node__avoindata_article.yml }
    - { src: metatag.metatag_defaults.node__avoindata_event.yml.j2, dest: metatag.metatag_defaults.node__avoindata_event.yml }
    - { src: metatag.metatag_defaults.node__avoindata_guide_page.yml.j2, dest: metatag.metatag_defaults.node__avoindata_guide_page.yml }
    - { src: system.performance.yml.j2, dest: system.performance.yml }
    - { src: ape.settings.yml.j2, dest: ape.settings.yml }
    - { src: locale.settings.yml.j2, dest: locale.settings.yml }
    - { src: user.role.administrator.yml.j2, dest: user.role.administrator.yml }
    - { src: user.role.anonymous.yml.j2, dest: user.role.anonymous.yml }
    - { src: user.role.authenticated.yml.j2, dest: user.role.authenticated.yml }
    - { src: user.role.ckan_admin.yml.j2, dest: user.role.ckan_admin.yml }
    - { src: user.role.editor.yml.j2, dest: user.role.editor.yml }
    - { src: user.role.publisher.yml.j2, dest: user.role.publisher.yml }
    - { src: language.entity.en.yml.j2, dest: language.entity.en.yml }
    - { src: language.entity.fi.yml.j2, dest: language.entity.fi.yml }
    - { src: language.entity.sv.yml.j2, dest: language.entity.sv.yml }

- name: Import drupal settings
  shell: "{{ drupal_drush_path }} -y cim --partial --source {{ drupal_root }}/site_config"
  args:
    chdir: "{{ drupal_root }}"
  tags:
    - skip_ansible_lint

- name: Clear caches
  shell: ./vendor/bin/drupal cr
  args:
    chdir: "{{ drupal_root }}"
  tags:
    - skip_ansible_lint

- name: Update drupal translations
  shell: "{{ drupal_drush_path }} language:import:translations {{ playbook_dir }}/roles/drupal/files/i18n/{{ item.src }}/drupal8.po --langcode {{ item.dest }}"
  args:
    chdir: "{{ drupal_root }}"
  with_items:
    - { src: "fi", dest: "fi" }
    - { src: "sv", dest: "sv" }
    - { src: "en_GB", dest: "en" }
  tags:
    - skip_ansible_lint

# Without this, the added translatable status for content types like guide page, doesn't work and
# fails because of an SQL error.
- name: Run entity updates for database
  shell: "{{ drupal_drush_path }} updatedb --entity-updates -y"
  args:
    chdir: "{{ drupal_root }}"
  tags:
    - skip_ansible_lint

- name: Create initial users
  shell: "{{ drupal_drush_path }} user-create {{ item.username }} --password='{{ item.password }}' --mail='{{ item.email }}'"
  args:
    chdir: "{{ drupal_root }}"
  with_flattened:
    - "{{ drupal_initial_users }}"
  ignore_errors: true
  tags:
    - skip_ansible_lint

- name: Set user roles
  shell: "{{ drupal_drush_path }} user-add-role {{ item.role }} {{ item.username }}"
  args:
    chdir: "{{ drupal_root }}"
  with_items: "{{ drupal_roles }}"
  tags:
    - skip_ansible_lint
