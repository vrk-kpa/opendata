#  Launch AWS EC2 instances, test ansible roles and terminate instances

- name: Play 1 - Create a sandbox instance
  hosts: localhost
  gather_facts: False
  vars:
    aws_private_key_name: "{{ lookup('env','AWS_PRIVATE_KEY_NAME') }}"
    aws_ec2_instance_type: "{{ lookup('env','AWS_EC2_INSTANCE_TYPE') }}"
    aws_ec2_security_group:  "{{ lookup('env','AWS_EC2_SECURITY_GROUP') }}"
    aws_ec2_image: "{{ lookup('env','AWS_EC2_IMAGE') }}"
    aws_region: "{{ lookup('env','AWS_REGION') }}"
    aws_vpc_subnet_id: "{{ lookup('env','AWS_VPC_SUBNET_ID') }}"
    aws_ec2_assign_public_ip: "{{ lookup('env','AWS_EC2_ASSIGN_PUBLIC_IP') }}"
    aws_ec2_instance_profile: "{{ lookup('env','AWS_EC2_INSTANCE_PROFILE') }}"
    aws_ec2_instance_shutdown_delay: "{{ lookup('env','AWS_EC2_INSTANCE_SHUTDOWN_DELAY') }}"
    circle_branch: "{{ lookup('env','CIRCLE_BRANCH') }}"
    circle_build_num: "{{ lookup('env','CIRCLE_BUILD_NUM') }}"
    circle_tag: "{{ lookup('env','CIRCLE_TAG') }}"
    circle_sha1: "{{ lookup('env','CIRCLE_SHA1') }}"
    circle_username: "{{ lookup('env','CIRCLE_USERNAME') }}"

  tasks:

  - block:

    - name: Configure local .ssh directory permissions
      file:
        path: ~/.ssh
        state: directory
        mode: 0700

    - name: Configure AWS private key permissions
      file:
        path: ~/.ssh/id_rsa
        mode: 0600

    - name: Disable host key checking
      copy:
        dest: ~/.ssh/config
        content: |
          Host *
              StrictHostKeyChecking no
              IdentityFile ~/.ssh/id_rsa

    - name: Launch EC2 instance
      ec2:
         key_name: "{{ aws_private_key_name }}"
         group: "{{ aws_ec2_security_group }}"
         instance_type: "{{ aws_ec2_instance_type }}"
         image: "{{ aws_ec2_image }}"
         wait: true
         region: "{{ aws_region }}"
         vpc_subnet_id: "{{ aws_vpc_subnet_id }}"
         assign_public_ip: "{{ aws_ec2_assign_public_ip }}"
         instance_profile_name: "{{ aws_ec2_instance_profile }}"
         instance_initiated_shutdown_behavior: terminate
         user_data: |
           #!/bin/bash
           /sbin/shutdown -h +{{ aws_ec2_instance_shutdown_delay }} "Scheduled shutdown"
         instance_tags:
          Name: "build-{{ circle_branch }}-{{ circle_build_num }}"
          circle_branch: "{{ circle_branch }}"
          circle_build_num: "{{ circle_build_num }}"
          circle_tag: "{{ circle_tag }}"
          circle_sha1: "{{ circle_sha1 }}"
          circle_username: "{{ circle_username }}"
          environment: buildtest

      register: ec2

    - name: Add new EC2 instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: circleci
      with_items: "{{ ec2.instances }}"

    - name: Save instance ids to file
      copy:
        dest: /tmp/instance_ids
        content: "{{ ec2.instance_ids }}"

    - name: Save instance public ip to file
      copy:
        dest: /tmp/instance_public_ip
        content: "{{ item.public_ip }}"
      with_items: "{{ ec2.instances }}"

    - name: Wait for connection
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        delay: 10
        timeout: 300
      with_items: "{{ ec2.instances }}"

    tags: always

- name: Play 2 - Prepare instance(s)
  hosts: circleci
  remote_user: "{{ lookup('env','AWS_EC2_USER') }}"
  become: True
  gather_facts: False

  tasks:

  - name: Wait for cloud-init to finish
    raw: while [ ! -f /var/lib/cloud/instance/boot-finished ]; do sleep 1; done

  - name: Install python
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python)
    args:
      warn: False

  - name: Install required packages
    apt:
      name:
        - libssl-dev
        - libffi-dev
        - python-dev
        - python-pip
        - git
        - nfs-common
        - rsync
      update_cache: yes
    tags: always

  - name: Install python packages
    pip:
      name:
        - setuptools
        - awscli
        - ansible
        - markupsafe
      state: present
    tags: always

- name: Play 3 - Configure instance(s)
  hosts: circleci
  remote_user: "{{ lookup('env','AWS_EC2_USER') }}"
  become: True
  gather_facts: True

  tasks:

  - name: Include variables
    include_vars: "{{ item }}"
    with_fileglob:
      - "{{ playbook_dir }}/inventories/group_vars/all/*"
      - "{{ playbook_dir }}/inventories/group_vars/build_test/*"
    tags: always

  - name: Set pass_status to default value
    set_fact:
      pass_status: True
      failed_task_name: ""
      failed_task_result: ""
    tags: always

  - name: Block for testing roles
    block:
      - import_role:
          name: common
      - import_role:
          name: postgres
        tags: always
      - import_role:
          name: opendata_frontend
      - import_role:
          name: solr
        tags: always
      - import_role:
          name: redis
        tags: always
      - import_role:
          name: apache
      - import_role:
          name: ckan
      - import_role:
          name: php
      - import_role:
          name: composer
      - import_role:
          name: nginx
      - import_role:
          name: drupal
      - import_role:
          name: datapusher

    rescue:
    - name: Continue playbook execution to next play always
      command: /bin/true
      tags: always

    - name: Set fact
      set_fact:
        pass_status: False
      tags: always

    - name: Save failed task name
      set_fact:
        failed_task_name: "{{ ansible_failed_task }}"
      when: ansible_failed_task is defined
      tags: always

    - name: Save failed result
      set_fact:
        failed_task_result: "{{ ansible_failed_result }}"
      when: ansible_failed_result is defined
      tags: always

- name: Play 4 - Set pass status
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    aws_region: "{{ lookup('env','AWS_REGION') }}"

  tasks:
    - name: Set pass status fact based on previous play
      set_fact:
        pass_status: "{{ hostvars[ ec2.instances[0].public_ip ]['pass_status'] }}"
      tags: always

    - name: Print failed task debug information
      debug:
        msg:
        - "{{ hostvars[ ec2.instances[0].public_ip ]['failed_task_name'] }}"
        - "{{ hostvars[ ec2.instances[0].public_ip ]['failed_task_result'] }}"
        verbosity: 1
      tags: always

    - name: Check actual playbook execution result
      debug:
        msg:
        - "Playbook execution successful: {{ pass_status }}"
      failed_when: pass_status == False
      tags: always
