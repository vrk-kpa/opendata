!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.CKEditor5=n():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.avoindataSection=n())}(self,(()=>(()=>{var __webpack_modules__={"./src/avoindataSection/avoindataSection.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ AvoindataSection)\n/* harmony export */ });\n/* harmony import */ var _avoindataSectionEditing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./avoindataSectionEditing */ "./src/avoindataSection/avoindataSectionEditing.js");\n/* harmony import */ var _avoindataSectionUI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./avoindataSectionUI */ "./src/avoindataSection/avoindataSectionUI.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n// The contents of AvoindataSectionUI and AvoindataSectionEditing could be included in this\n// file, but it is recommended to separate these concerns in different files.\n\n\n\n\nclass AvoindataSection extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  // Note that AvoindataSectionEditing and AvoindataSectionUI also extend `Plugin`, but these\n  // are not seen as individual plugins by CKEditor 5. CKEditor 5 will only\n  // discover the plugins explicitly exported in index.js.\n  static get requires() {\n    return [_avoindataSectionEditing__WEBPACK_IMPORTED_MODULE_0__["default"], _avoindataSectionUI__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.avoindataSection/./src/avoindataSection/avoindataSection.js?')},"./src/avoindataSection/avoindataSectionEditing.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AvoindataSectionEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertAvoindataSectionCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertAvoindataSectionCommand */ \"./src/avoindataSection/insertAvoindataSectionCommand.js\");\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with section as this model:\n * <avoindataSection avoindataSectionId=\"\">\n *     <avoindataSectionTitle></avoindataSectionTitle>\n *     <avoindataSectionContent></avoindataSectionContent>\n * </avoindataSection>\n *\n * Which is converted for the browser/user as this markup\n * <div class=\"avoindata-section\" id=\"\">\n *    <div class=\"avoindata-section-title\">Title</div>\n *   <div class=\"avoindata-section-content\">Content</div>\n * </div>\n *\n * This file has the logic for defining the avoindataSection model, and for how it is\n * converted to standard DOM markup.\n */\nclass AvoindataSectionEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n      'insertAvoindataSectionCommand',\n      new _insertAvoindataSectionCommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <avoindataSection avoindataSectionId=\"\">\n   *     <avoindataSectionTitle></avoindataSectionTitle>\n   *     <avoindataSectionContent></avoindataSectionContent>\n   * </avoindataSection>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n    schema.register('avoindataSection', {\n      // Behaves like a self-contained object (e.g. an image).\n      isObject: true,\n      // Allow in places where other blocks are allowed (e.g. directly in the root).\n      allowWhere: '$block',\n      allowAttributes: ['avoindataSectionId']\n    });\n\n    schema.register('avoindataSectionTitle', {\n      // This creates a boundary for external actions such as clicking and\n      // and keypress. For section, when the cursor is inside this box, the\n      // keyboard shortcut for \"select all\" will be limited to the contents of\n      // the box.\n      isLimit: true,\n      // This is only to be used within avoindataSection.\n      allowIn: 'avoindataSection',\n      // Allow content that is allowed in blocks (e.g. text with attributes).\n      allowContentOf: '$root',\n    });\n\n    schema.register('avoindataSectionContent', {\n      isLimit: true,\n      allowIn: 'avoindataSection',\n      allowContentOf: '$root',\n    });\n\n    schema.addChildCheck((context, childDefinition) => {\n      // Disallow avoindataSection inside avoindataSectionContent.\n      if (\n        (context.endsWith('avoindataSectionContent') || context.endsWith('avoindataSectionTitle')) &&\n        childDefinition.name === 'avoindataSection'\n      ) {\n        return false;\n      }\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const { conversion } = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <div class=\"avoindata-section\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <avoindataSection> model.\n    conversion.for('upcast').elementToElement({\n      model: (viewElement, { writer }) => {\n        return writer.createElement('avoindataSection', { avoindataSectionId: viewElement.getAttribute('id') });\n      },\n      view: {\n        name: 'div',\n        classes: 'avoindata-section',\n        attributes: ['id']\n      },\n    });\n\n    // If <div class=\"avoindata-section-title\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <avoindataSectionTitle> model, provided it is a child element of <avoindataSection>,\n    // as required by the schema.\n    conversion.for('upcast').elementToElement({\n      model: 'avoindataSectionTitle',\n      view: {\n        name: 'div',\n        classes: 'avoindata-section-title',\n      },\n    });\n\n    // If <div class=\"avoindata-section-content\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <avoindataSectionContent> model, provided it is a child element of\n    // <avoindataSection>, as required by the schema.\n    conversion.for('upcast').elementToElement({\n      model: 'avoindataSectionContent',\n      view: {\n        name: 'div',\n        classes: 'avoindata-section-content',\n      },\n    });\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n\n    // Instances of <avoindataSection> are saved as\n    // <div class=\"avoindata-section\">{{inner content}}</div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: {\n        name: 'avoindataSection',\n        attributes: ['avoindataSectionId']\n      },\n      view: (modelElement, { writer }) => {\n        return writer.createContainerElement(\n          'div', { class: 'avoindata-section', id: modelElement.getAttribute('avoindataSectionId') }\n        );\n      }\n    });\n\n    // Instances of <avoindataSectionTitle> are saved as\n    // <div class=\"avoindata-section-title\">{{inner content}}</div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'avoindataSectionTitle',\n      view: {\n        name: 'div',\n        classes: 'avoindata-section-title',\n      },\n    });\n\n    // Instances of <avoindataSectionContent> are saved as\n    // <div class=\"savoindata-section-content\" id=\"\">{{inner content}}</div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'avoindataSectionContent',\n      view: {\n        name: 'div',\n        classes: 'avoindata-section-content',\n      },\n    });\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <avoindataSection> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n      model: {\n        name: 'avoindataSection',\n        attributes: ['avoindataSectionId']\n      },\n      view: (modelElement, { writer: viewWriter }) => {\n        const section = viewWriter.createContainerElement('div', {\n          class: 'avoindata-section',\n          id: modelElement.getAttribute('avoindataSectionId')\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(section, viewWriter, { label: 'Avoindata Section widget' });\n      },\n    });\n\n    // Convert the <avoindataSectionTitle> model into an editable <div> widget.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'avoindataSectionTitle',\n      view: (modelElement, { writer: viewWriter }) => {\n        const div = viewWriter.createEditableElement('div', {\n          class: 'avoindata-section-title',\n        });\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(div, viewWriter);\n      },\n    });\n\n    // Convert the <avoindataSectionContent> model into an editable <div> widget.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'avoindataSectionContent',\n      view: (modelElement, { writer: viewWriter }) => {\n        const div = viewWriter.createEditableElement('div', {\n          class: 'avoindata-section-content',\n        });\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(div, viewWriter);\n      },\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.avoindataSection/./src/avoindataSection/avoindataSectionEditing.js?")},"./src/avoindataSection/avoindataSectionUI.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AvoindataSectionUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _avoindataSectionView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./avoindataSectionView */ \"./src/avoindataSection/avoindataSectionView.js\");\n/* harmony import */ var _icons_icon_section_svg_source__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../icons/icon-section.svg?source */ \"./icons/icon-section.svg?source\");\n/**\n * @file registers the avoindataSection toolbar button and binds functionality to it.\n */\n\n\n\n\n\n\nclass AvoindataSectionUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n  }\n\n  init() {\n    const editor = this.editor;\n    // Create the balloon and the form view.\n    this._balloon = editor.plugins.get(ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon);\n    this.formView = this._createFormView();\n    const command = editor.commands.get('insertAvoindataSectionCommand');\n\n    // This will register the avoindataSection toolbar button.\n    editor.ui.componentFactory.add('avoindataSection', (locale) => {\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Avoindata Section widget'),\n        icon: _icons_icon_section_svg_source__WEBPACK_IMPORTED_MODULE_3__,\n        tooltip: true\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      /* this.listenTo(buttonView, 'execute', () =>\n        editor.execute('insertAvoindataSectionCommand'),\n      ); */\n\n      // Show the UI on button click.\n      this.listenTo(buttonView, 'execute', () => {\n        this._showUI();\n      });\n\n      return buttonView;\n    });\n  }\n\n  _createFormView() {\n    const editor = this.editor;\n    const formView = new _avoindataSectionView__WEBPACK_IMPORTED_MODULE_2__[\"default\"](editor.locale);\n\n    // Execute the command after clicking the \"Save\" button.\n    this.listenTo(formView, 'submit', () => {\n      // Grab values from the input fields.\n      const id = formView.idInputView.fieldView.element.value;\n\n      editor.model.change(writer => {\n        editor.execute('insertAvoindataSectionCommand', id);\n      });\n\n      // Hide the form view after submit.\n      this._hideUI();\n    });\n\n    // Hide the form view after clicking the \"Cancel\" button.\n    this.listenTo(formView, 'cancel', () => {\n      this._hideUI();\n    });\n\n    // Hide the form view when clicking outside the balloon.\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.clickOutsideHandler)({\n      emitter: formView,\n      activator: () => this._balloon.visibleView === formView,\n      contextElements: [this._balloon.view.element],\n      callback: () => this._hideUI()\n    });\n\n    return formView;\n  }\n\n  _showUI() {\n    const selection = this.editor.model.document.selection;\n\n    this._balloon.add({\n      view: this.formView,\n      position: this._getBalloonPositionData()\n    });\n\n    const id = selection.getSelectedElement()?.getAttribute('avoindataSectionId') || '';\n    this.formView.idInputView.fieldView.value = id;\n\n    this.formView.focus();\n  }\n\n  _hideUI() {\n    // Clear the input field values and reset the form.\n    this.formView.idInputView.fieldView.value = '';\n    this.formView.element.reset();\n\n    this._balloon.remove(this.formView);\n\n    // Focus the editing view after inserting the abbreviation so the user can start typing the content\n    // right away and keep the editor focused.\n    this.editor.editing.view.focus();\n  }\n\n  _getBalloonPositionData() {\n    const view = this.editor.editing.view;\n    const viewDocument = view.document;\n    let target = null;\n\n    // Set a target position by converting view selection range to DOM\n    target = () => view.domConverter.viewRangeToDom(viewDocument.selection.getFirstRange());\n\n    return {\n      target\n    };\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.avoindataSection/./src/avoindataSection/avoindataSectionUI.js?")},"./src/avoindataSection/avoindataSectionView.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n\n\n\nclass FormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n  constructor(locale) {\n    super(locale);\n\n    this.heading = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabelView(this.locale);\n    this.heading.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['title']\n      },\n      children: ['Avoindata section']\n    })\n\n    this.idInputView = this._createInput('Id');\n\n    this.saveButtonView = this._createButton('Save', null, 'btn btn-primary');\n    // Submit type of the button will trigger the submit event on entire form when clicked\n    // (see submitHandler() in render() below).\n    this.saveButtonView.type = 'submit';\n\n    this.cancelButtonView = this._createButton('Cancel', null, 'btn btn-secondary');\n\n    // Delegate ButtonView#execute to FormView#cancel\n    this.cancelButtonView.delegate('execute').to(this, 'cancel');\n\n    this.childViews = this.createCollection([\n      this.heading,\n      this.idInputView,\n      this.saveButtonView,\n      this.cancelButtonView\n    ]);\n\n    this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-reset_all-excluded', 'avoindata-section-id-form'],\n        tabindex: '-1'\n      },\n      children: this.childViews\n    });\n  }\n\n  render() {\n    super.render();\n\n    // Submit the form when the user clicked the save button or pressed enter in the input.\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.submitHandler)({\n      view: this\n    });\n  }\n\n  focus() {\n    this.childViews.get(1).focus();\n  }\n\n  _createInput(label) {\n    const labeledInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(this.locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText);\n\n    labeledInput.label = label;\n\n    return labeledInput;\n  }\n\n  _createButton(label, icon, className) {\n    const button = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView();\n\n    button.set({\n      label,\n      icon,\n      tooltip: true,\n      class: className,\n      withText: true,\n    });\n\n    return button;\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.avoindataSection/./src/avoindataSection/avoindataSectionView.js?")},"./src/avoindataSection/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _avoindataSection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./avoindataSection */ "./src/avoindataSection/avoindataSection.js");\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  AvoindataSection: _avoindataSection__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n\n//# sourceURL=webpack://CKEditor5.avoindataSection/./src/avoindataSection/index.js?')},"./src/avoindataSection/insertAvoindataSectionCommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertAvoindataSectionCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertAvoindataSectionCommand, which is executed when the avoindataSection\n * toolbar button is pressed.\n */\n\n\n\nclass InsertAvoindataSectionCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(id) {\n    const { model } = this.editor;\n\n    model.change((writer) => {\n      const existingElement = writer.model.document.selection?.getSelectedElement();\n\n      if (existingElement && existingElement.name == 'avoindataSection') {\n        writer.setAttribute('avoindataSectionId', id, existingElement);\n      } else {\n        // Insert <avoindataSection>*</avoindataSection> at the current selection position\n        // in a way that will result in creating a valid model structure.\n        const avoindataSection = createAvoindataSection(writer, id);\n        model.insertContent(avoindataSection);\n        const selection = writer.createSelection(avoindataSection.getChild(0), 'in');\n        writer.setSelection(selection)\n      }\n    });\n  }\n\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // avoindataSection is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      'avoindataSection',\n    );\n\n    // If the cursor is not in a location where a avoindataSection can be added, return\n    // null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createAvoindataSection(writer, id) {\n  // Create instances of the elements registered with the editor in avoindataexpanderediting.js.\n  const avoindataSection = writer.createElement('avoindataSection', { avoindataSectionId: id });\n  const avoindataSectionTitle = writer.createElement('avoindataSectionTitle');\n  const avoindataSectionContent = writer.createElement('avoindataSectionContent');\n\n  // Append the title and content elements to the avoindataSection, which matches\n  // the parent/child relationship as defined in their schemas.\n  writer.append(avoindataSectionTitle, avoindataSection);\n  writer.append(avoindataSectionContent, avoindataSection);\n\n  // The text content will automatically be wrapped in a\n  // `<p>`.\n  const title = writer.createElement('paragraph');\n  writer.insertText('Title', title, 0);\n  writer.append(title, avoindataSectionTitle);\n  const content = writer.createElement('paragraph');\n  writer.insertText('Content', content, 0);\n  writer.append(content, avoindataSectionContent);\n\n  // Return the element to be added to the editor.\n  return avoindataSection;\n}\n\n\n//# sourceURL=webpack://CKEditor5.avoindataSection/./src/avoindataSection/insertAvoindataSectionCommand.js?")},"./icons/icon-section.svg?source":module=>{"use strict";eval('module.exports = "<svg width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <g id=\\"Icons/Basic-icons/window\\" stroke=\\"none\\" stroke-width=\\"1\\" fill-rule=\\"evenodd\\">\\n        <path d=\\"M22,1 C23.103,1 24,1.897 24,3 L24,21 C24,22.102 23.103,23 22,23 L2,23 C0.897,23 0,22.102 0,21 L0,3 C0,1.897 0.897,1 2,1 L22,1 Z M21.999,7 L2,7 L2,21 L21.997,21 L21.999,7 Z M22,3 L2,3 L2,5 L22,5 L22,3 Z\\" id=\\"path-1\\" fill=\\"#ecedee\\"></path>\\n        <path d=\\"M1.5,2.3 L22.5,2.3 22.5,5.5 1.5,5.5Z\\" id=\\"path-2\\" fill=\\"#2a6ebb\\"></path>\\n    </g>\\n</svg>\\n";\n\n//# sourceURL=webpack://CKEditor5.avoindataSection/./icons/icon-section.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.avoindataSection/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.avoindataSection/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.avoindataSection/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/avoindataSection/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));