!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CKEditor5=e():(n.CKEditor5=n.CKEditor5||{},n.CKEditor5.avoindataHint=e())}(self,(()=>(()=>{var __webpack_modules__={"./src/avoindataHint/avoindataHint.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ AvoindataHint)\n/* harmony export */ });\n/* harmony import */ var _avoindataHintEditing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./avoindataHintEditing */ "./src/avoindataHint/avoindataHintEditing.js");\n/* harmony import */ var _avoindataHintUI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./avoindataHintUI */ "./src/avoindataHint/avoindataHintUI.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n\n// The contents of AvoindataHintUI and AvoindataHintEditing could be included in this\n// file, but it is recommended to separate these concerns in different files.\n\n\n\n\nclass AvoindataHint extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  // Note that AvoindataHintEditing and AvoindataHintUI also extend `Plugin`, but these\n  // are not seen as individual plugins by CKEditor 5. CKEditor 5 will only\n  // discover the plugins explicitly exported in index.js.\n  static get requires() {\n    return [_avoindataHintEditing__WEBPACK_IMPORTED_MODULE_0__["default"], _avoindataHintUI__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.avoindataHint/./src/avoindataHint/avoindataHint.js?')},"./src/avoindataHint/avoindataHintEditing.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AvoindataHintEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertAvoindataHintCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertAvoindataHintCommand */ \"./src/avoindataHint/insertAvoindataHintCommand.js\");\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with expander as this model:\n * <avoindataHint>\n *   <avoindataHintHeader>\n *     <avoindataHintIcon/>\n *     <avoindataHintTitle></avoindataHintTitle>\n *   </avoindataHintHeader>\n *     <avoindataHintContent></avoindataHintContent>\n * </avoindataHint>\n *\n * Which is converted for the browser/user as this markup\n * <div class=\"avoindata-hint\">\n *   <div class=\"avoindata-hint-header\">\n *     <img class=\"avoindata-hint-icon\" src=\"../icons/icon-info.svg\"/>\n *     <div class=\"avoindata-hint-title\">Title</div>\n *   </div>\n *   <div class=\"avoindata-hint-content\">Content</div>\n * </div>\n *\n * This file has the logic for defining the avoindataHint model, and for how it is\n * converted to standard DOM markup.\n */\nclass AvoindataHintEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n      'insertAvoindataHintCommand',\n      new _insertAvoindataHintCommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <avoindataHint>\n   *   <avoindataHintHeader>\n   *     <avoindataHintIcon/>\n   *     <avoindataHintTitle></avoindataHintTitle>\n   *   </avoindataHintHeader>\n   *     <avoindataHintContent></avoindataHintContent>\n   * </avoindataHint>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n    schema.register('avoindataHint', {\n      // Behaves like a self-contained object (e.g. an image).\n      isObject: true,\n      // Allow in places where other blocks are allowed (e.g. directly in the root).\n      allowWhere: '$block',\n    });\n\n    schema.register('avoindataHintHeader', {\n      // This is only to be used within avoindataHint.\n      isObject: true,\n      isSelectable: false,\n      allowIn: 'avoindataHint',\n      allowChildren: ['avoindataHintIcon', 'avoindataHintTitle']\n    });\n\n    schema.register('avoindataHintIcon', {\n      isObject: true,\n      isContent: true,\n      isInline: true,\n      isBlock: false,\n      isSelectable: false,\n      isLimit: false,\n      // This is only to be used within avoindataHint.\n      allowIn: 'avoindataHintHeader',\n      allowAttributes: ['src', 'alt', 'class']\n    });\n\n    schema.register('avoindataHintTitle', {\n      // This creates a boundary for external actions such as clicking and\n      // and keypress. For example, when the cursor is inside this box, the\n      // keyboard shortcut for \"select all\" will be limited to the contents of\n      // the box.\n      isLimit: true,\n      // This is only to be used within avoindataHint.\n      allowIn: 'avoindataHintHeader',\n      // Allow content that is allowed in blocks (e.g. text with attributes).\n      allowContentOf: '$root',\n    });\n\n    schema.register('avoindataHintContent', {\n      isLimit: true,\n      allowIn: 'avoindataHint',\n      allowContentOf: '$root',\n    });\n\n    schema.addChildCheck((context, childDefinition) => {\n      // Disallow avoindataHint inside avoindataHintContent.\n      if (\n        (context.endsWith('avoindataHintContent') || context.endsWith('avoindataHintTitle')) &&\n        childDefinition.name === 'avoindataHint'\n      ) {\n        return false;\n      }\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const { conversion } = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <div class=\"avoindata-hint\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <avoindataHint> model.\n    conversion.for('upcast').elementToElement({\n      model: 'avoindataHint',\n      view: {\n        name: 'div',\n        classes: 'avoindata-hint',\n      },\n    });\n\n    conversion.for('upcast').elementToElement({\n      model: 'avoindataHintHeader',\n      view: {\n        name: 'div',\n        classes: 'avoindata-hint-header',\n      },\n    });\n\n    conversion.for('upcast').elementToElement({\n      model: 'avoindataHintIcon',\n      view: {\n        name: 'img',\n        classes: 'avoindata-hint-icon',\n      },\n    });\n\n    // If <div class=\"avoindata-hint-title\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <avoindataHintTitle> model, provided it is a child element of <avoindataHint>,\n    // as required by the schema.\n    conversion.for('upcast').elementToElement({\n      model: 'avoindataHintTitle',\n      view: {\n        name: 'div',\n        classes: 'avoindata-hint-title',\n      },\n    });\n\n    // If <div class=\"avoindata-hint-content\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <avoindataHintContent> model, provided it is a child element of\n    // <avoindataHint>, as required by the schema.\n    conversion.for('upcast').elementToElement({\n      model: 'avoindataHintContent',\n      view: {\n        name: 'div',\n        classes: 'avoindata-hint-content',\n      },\n    });\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <avoindataHint> are saved as\n    // <div class=\"avoindata-hint\">{{inner content}}</div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'avoindataHint',\n      view: {\n        name: 'div',\n        classes: 'avoindata-hint',\n      },\n    });\n\n    // Instances of <avoindataHintHeader> are saved as\n    // <div class=\"avoindata-hint-header\">{{inner content}}</div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'avoindataHintHeader',\n      view: {\n        name: 'div',\n        classes: 'avoindata-hint-header',\n      },\n    });\n\n    // Instances of <avoindataHintIcon> are saved as\n    // <img class=\"avoindata-hint-icon\" src=\"../icons/icon-info.svg\" alt=\"Avoindata Hint icon\"></div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'avoindataHintIcon',\n      view: (modelElement, { writer }) => {\n        return writer.createUIElement('img', { class: \"avoindata-hint-icon\", src: '/themes/avoindata/images/avoindata-hint-icon.svg' })\n      }\n    });\n\n    // Instances of <avoindataHintTitle> are saved as\n    // <div class=\"avoindata-hint-title\">{{inner content}}</div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'avoindataHintTitle',\n      view: {\n        name: 'div',\n        classes: 'avoindata-hint-title',\n      },\n    });\n\n    // Instances of <avoindataHintContent> are saved as\n    // <div class=\"savoindata-hint-content\">{{inner content}}</div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'avoindataHintContent',\n      view: {\n        name: 'div',\n        classes: 'avoindata-hint-content',\n      },\n    });\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <avoindataHint> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'avoindataHint',\n      view: (modelElement, { writer: viewWriter }) => {\n        const section = viewWriter.createContainerElement('div', {\n          class: 'avoindata-hint',\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(section, viewWriter, { label: 'Avoindata Hint widget' });\n      },\n    });\n\n    // Convert the <avoindataHintHeader> model into a container element in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'avoindataHintHeader',\n      view: (modelElement, { writer: viewWriter }) => {\n        return viewWriter.createContainerElement('div', {\n          class: 'avoindata-hint-header',\n        });\n      },\n    });\n\n    // Convert the <avoindataHintIcon> model into an UI element in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'avoindataHintIcon',\n      view: (modelElement, { writer: viewWriter }) => {\n        return viewWriter.createUIElement('img', {\n          class: 'avoindata-hint-icon',\n          src: \"/themes/avoindata/images/avoindata-hint-icon.svg\",\n          alt: \"Avoindata Hint icon\",\n        });\n      },\n    });\n\n    // Convert the <avoindataHintTitle> model into an editable <div> widget.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'avoindataHintTitle',\n      view: (modelElement, { writer: viewWriter }) => {\n        const div = viewWriter.createEditableElement('div', {\n          class: 'avoindata-hint-title',\n        });\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(div, viewWriter);\n      },\n    });\n\n    // Convert the <avoindataHintContent> model into an editable <div> widget.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'avoindataHintContent',\n      view: (modelElement, { writer: viewWriter }) => {\n        const div = viewWriter.createEditableElement('div', {\n          class: 'avoindata-hint-content',\n        });\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(div, viewWriter);\n      },\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.avoindataHint/./src/avoindataHint/avoindataHintEditing.js?")},"./src/avoindataHint/avoindataHintUI.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AvoindataHintUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_icon_info_svg_source__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../icons/icon-info.svg?source */ \"./icons/icon-info.svg?source\");\n/**\n * @file registers the avoindataHint toolbar button and binds functionality to it.\n */\n\n\n\n\n\nclass AvoindataHintUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the avoindataHint toolbar button.\n    editor.ui.componentFactory.add('avoindataHint', (locale) => {\n      const command = editor.commands.get('insertAvoindataHintCommand');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Avoindata Hint widget'),\n        icon: _icons_icon_info_svg_source__WEBPACK_IMPORTED_MODULE_2__,\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () =>\n        editor.execute('insertAvoindataHintCommand'),\n      );\n\n      return buttonView;\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.avoindataHint/./src/avoindataHint/avoindataHintUI.js?")},"./src/avoindataHint/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _avoindataHint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./avoindataHint */ "./src/avoindataHint/avoindataHint.js");\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  AvoindataHint: _avoindataHint__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n\n//# sourceURL=webpack://CKEditor5.avoindataHint/./src/avoindataHint/index.js?')},"./src/avoindataHint/insertAvoindataHintCommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertAvoindataHintCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertAvoindataHintCommand, which is executed when the avoindataHint\n * toolbar button is pressed.\n */\n\n\n\nclass InsertAvoindataHintCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute() {\n    const { model } = this.editor;\n\n    model.change((writer) => {\n      // Insert <avoindataHint>*</avoindataHint> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createAvoindataHint(writer));\n    });\n  }\n\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // avoindataHint is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      'avoindataHint',\n    );\n\n    // If the cursor is not in a location where a avoindataHint can be added, return\n    // null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createAvoindataHint(writer) {\n  // Create instances of the elements registered with the editor in\n  // avoindataexpanderediting.js.\n  const avoindataHint = writer.createElement('avoindataHint');\n  const avoindataHintHeader = writer.createElement('avoindataHintHeader');\n  const avoindataHintIcon = writer.createElement('avoindataHintIcon');\n  const avoindataHintTitle = writer.createElement('avoindataHintTitle');\n  const avoindataHintContent = writer.createElement('avoindataHintContent');\n\n  // Append the title and content elements to the avoindataHint, which matches\n  // the parent/child relationship as defined in their schemas.\n  writer.append(avoindataHintHeader, avoindataHint);\n  writer.append(avoindataHintIcon, avoindataHintHeader);\n  writer.append(avoindataHintTitle, avoindataHintHeader);\n  writer.append(avoindataHintContent, avoindataHint);\n\n  // The text content will automatically be wrapped in a\n  // `<p>`.\n  writer.appendElement('paragraph', avoindataHintTitle);\n  writer.appendElement('paragraph', avoindataHintContent);\n\n  // Return the element to be added to the editor.\n  return avoindataHint;\n}\n\n\n//# sourceURL=webpack://CKEditor5.avoindataHint/./src/avoindataHint/insertAvoindataHintCommand.js?")},"./icons/icon-info.svg?source":module=>{"use strict";eval('module.exports = "<svg fill=\\"#E97025\\" width=\\"24px\\" height=\\"24px\\" viewBox=\\"0 0 24 24\\" version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n    <g id=\\"Icons/Basic-icons/info\\" fill=\\"#E97025\\" stroke-width=\\"1\\" >\\n        <path d=\\"M12,-1.24344979e-14 C18.617,-1.24344979e-14 24,5.383 24,12 C24,18.617 18.617,24 12,24 C5.383,24 2.13162821e-14,18.617 2.13162821e-14,12 C2.13162821e-14,5.383 5.383,-1.24344979e-14 12,-1.24344979e-14 Z M12,2 C6.486,2 2,6.486 2,12 C2,17.514 6.486,22 12,22 C17.514,22 22,17.514 22,12 C22,6.486 17.514,2 12,2 Z M12.002875,10.0003646 C12.5548692,10.0003646 13.0028646,10.4483599 13.0028646,11.0003542 L13.0028646,17.0002917 L14.0028541,17.0002917 C14.5548484,17.0002917 15.0028437,17.448287 15.0028437,18.0002813 C15.0028437,18.5522755 14.5548484,19.0002708 14.0028541,19.0002708 L9.99989583,19.0002708 C9.44790158,19.0002708 8.99990625,18.5522755 8.99990625,18.0002813 C8.99990625,17.448287 9.44790158,17.0002917 9.99989583,17.0002917 L10.9998854,17.0002917 L10.9998854,12.0003438 L9.99989583,12.0003438 C9.44790158,12.0003438 8.99990625,11.5523484 8.99990625,11.0003542 C8.99990625,10.4483599 9.44790158,10.0003646 9.99989583,10.0003646 L12.002875,10.0003646 Z M11.5018802,5.00041667 C12.3318715,5.00041667 13.0028646,5.67240967 13.0028646,6.50040104 C13.0028646,7.27968704 12.4084901,7.92078763 11.6465945,7.99351474 L11.5017552,8.00038542 L11.5017552,8.00038542 L11.4998802,8.00038542 C10.6708888,8.00038542 9.99989583,7.32839242 9.99989583,6.50040104 C9.99989583,5.67240967 10.6708888,5.00041667 11.4998802,5.00041667 L11.5018802,5.00041667 Z\\" id=\\"path\\" fill=\\"#E97025\\"></path>\\n    </g>\\n</svg>";\n\n//# sourceURL=webpack://CKEditor5.avoindataHint/./icons/icon-info.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.avoindataHint/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.avoindataHint/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.avoindataHint/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":n=>{"use strict";n.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(n,e)=>{for(var t in e)__webpack_require__.o(e,t)&&!__webpack_require__.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},__webpack_require__.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/avoindataHint/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));