{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    node.bundle|clean_class,
    node.isPromoted() ? 'is-promoted',
    node.isSticky() ? 'is-sticky',
    not node.isPublished() ? 'is-unpublished',
    view_mode ? view_mode|clean_class,
    'clearfix',
  ]
%}
<div class="container-fluid">
    <div class="avoindata-article-container avoindata-card-container">
        <div class="col-md-12">
            <article{{ attributes.addclass(classes) }}>
                <div class="row">
                    <div class="article-header-container col-md-8 col-sm-12">
                        <div class="row">
                            <div class="spacer"></div>
                            <h1 class="article-header">
                                {{label}}
                            </h1>
                        </div>
                        {{ title_prefix }}
                        {% if not page %}
                            <div class="row">
                                <h2{{ title_attributes }}>
                                    <a href="{{ url }}" rel="bookmark">{{ label }}</a>
                                </h2>
                            </div>
                        {% endif %}
                        {{ title_suffix }}
                        {% if display_submitted %}
                            <div class="article-author row">
                                <div{{ author_attributes.addclass('author') }}>
                                    {{ node.getCreatedTime|format_date('avoindata_long_date') }}
                                </div>
                            </div>
                        {% endif %}
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-8 col-sm-12">
                        <div{{ content_attributes.addclass('content') }}>
                            <div class="article-image row">
                                {{ content.field_image|field_value }}
                            </div>
                            <div class="article-body row">
                                {{ content.body|field_value }}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-12">
                        <div class="row opendata-card">
                            <div class="opendata-card-header">
                                <p class="opendata-card-heading">
                                    <i class="fas fa-folder-open avoindata-fa-icon"></i>
                                    {% trans %}
                                    Categories
                                    {% endtrans %}
                                </p>
                            </div>
                            <div class="opendata-card-content">
                                {% for tag in content.field_tags | field_value %}
                                    {% set tag_id = (tag['#cache'].tags.0 | split(':')).1 %}
                                    <a class="avoindata-card-list-item" href="/articles?category[]={{ tag_id }}&search=">
                                        <span>{{ tag['#title'] }} </span>
                                        <i class="far fa-plus-circle"></i>
                                        <i class="fas fa-times-circle"></i>
                                    </a>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row article-comment">
                    <div class="col-md-8 col-sm-12">
                        {{ content.field_article_comments|field_value }}
                    </div>
                </div>
            </article>
        </div>
    </div>
</div>
