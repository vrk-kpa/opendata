AWSTemplateFormatVersion: "2010-09-09"
Description: opendata application infrastructure

Parameters:
  EnvironmentName:
    Description: Name of the environment (infratest, dev, alpha, beta, www, prod)
    Type: 'AWS::SSM::Parameter::Value<String>'
  DNSHostName:
    Description: Host name for DNS record (e.g. infratest, dev, www)
    Type: 'AWS::SSM::Parameter::Value<String>'
  InstanceType:
    Description: EC2 instance type for the application servers
    Type: 'AWS::SSM::Parameter::Value<String>'
  PrivateSubnets:
    Description: The subnets for EC2 instances
    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>
  DatabaseSecurityGroup:
    Description: Security group of the RDS database
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::Id>'
  EFSFileSystem:
    Description: Name of the EFS filesystem
    Type: 'AWS::SSM::Parameter::Value<String>'
  EFSSecurityGroup:
    Description: Security group of the EFS filesystem
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::Id>'
  HostedZoneId:
    Description: Zone ID for the DNS record
    Type: 'AWS::SSM::Parameter::Value<AWS::Route53::HostedZone::Id>'
  HostedZoneIdAlternate:
    Description: "[Optional] Zone ID for the DNS record"
    Type: 'AWS::SSM::Parameter::Value<String>'
  WhitelistedIpAddressTRE:
    Type: 'AWS::SSM::Parameter::Value<String>'
  WhitelistedIpAddressHEL:
    Type: 'AWS::SSM::Parameter::Value<String>'
  GitBranch:
    Description: Git branch to checkout
    Type: 'AWS::SSM::Parameter::Value<String>'
  NumberOfSubnets:
    Description: Number of subnets. This must match your selections in the list of load balancer subnets below.
    Type: 'AWS::SSM::Parameter::Value<String>'
  PublicALBSubnets:
    Description: The subnets to attach to the load balancer
    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>
  PublicALBCertificate:
    Description: 'The AWS Certification Manager certificate ARN for the ALB certificate'
    Type: 'AWS::SSM::Parameter::Value<String>'
  Vpc:
    Description: Select an existing Vpc
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>'

Conditions:
  NumberOfSubnets1:
      !Equals [ 1, !Ref NumberOfSubnets ]
  NumberOfSubnets2:
      !Equals [ 2, !Ref NumberOfSubnets ]
  NumberOfSubnets3:
      !Equals [ 3, !Ref NumberOfSubnets ]
  NumberOfSubnets4:
      !Equals [ 4, !Ref NumberOfSubnets ]
  NumberOfSubnets5:
      !Equals [ 5, !Ref NumberOfSubnets ]
  NumberOfSubnets6:
      !Equals [ 6, !Ref NumberOfSubnets ]
  CreateAlternateDomainRecord: !Not [!Equals [!Ref HostedZoneIdAlternate, ""]]

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-0b2a4d260c54e8d3d # Canonical, Ubuntu, 18.04 LTS, amd64 bionic image build on 2019-05-14
      KeyName: ytp-seeding-key
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 20
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub avoindata-${EnvironmentName}
      SubnetId: !Select [ 0, !Ref PrivateSubnets ]
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash

          export HOME=/root
          export DEBIAN_FRONTEND=noninteractive

          apt-get update
          apt-get -y dist-upgrade
          apt-get -y install libssl-dev libffi-dev python-dev python-pip git nfs-common
          pip install setuptools --upgrade
          pip install awscli ansible markupsafe

          echo '${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,_netdev,x-systemd.after=network-online.target,nofail 0 0' >>/etc/fstab
          echo '/mnt/ytp_files /srv/ytp/files none defaults,bind,nofail,x-systemd.after=mnt.mount 0 0' >>/etc/fstab
          mount -a -t nfs4
          mkdir -p /srv/ytp/files /mnt/ytp_files
          mount /srv/ytp/files

          cd /root
          git clone -b ${GitBranch} https://github.com/yhteentoimivuuspalvelut/ytp.git

          cd /root/ytp/cloudformation/bootstrap
          ansible-playbook -i localhost, deploy.yml

          cd /root/ytp
          git submodule update --init --recursive

          aws s3 cp s3://avoindata-secrets/${EnvironmentName}/secrets.yml /root/avoindata-secrets/${EnvironmentName}/secrets.yml
          aws s3 cp s3://avoindata-secrets/${EnvironmentName}/.npmrc /root/avoindata-secrets/${EnvironmentName}/.npmrc
          aws s3 cp s3://avoindata-secrets/${EnvironmentName}/token.dat /root/avoindata-secrets/${EnvironmentName}/token.dat

          chmod -R go-rwx /root/avoindata-secrets/*

          cd /root/ytp/ansible
          ansible-playbook -i inventories/${EnvironmentName} single-server.yml

          echo "Bootstrap done."

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP
      SecurityGroupIngress:
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressTRE
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressHEL
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref PublicALBSecurityGroup
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref PublicALBSecurityGroup
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressTRE
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressTRE
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressHEL
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressHEL
        - FromPort: 8983
          ToPort: 8983
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressTRE
        - FromPort: 8983
          ToPort: 8983
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddressHEL
      VpcId: !Ref Vpc

  DatabaseIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      GroupId: !Ref DatabaseSecurityGroup
      SourceSecurityGroupId: !Ref InstanceSecurityGroup


  EFSIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      GroupId: !Ref EFSSecurityGroup
      SourceSecurityGroupId: !Ref InstanceSecurityGroup

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::avoindata-secrets/${EnvironmentName}/*"
              - Effect: Allow
                Action: "*"
                Resource:
                  - !Sub "arn:aws:s3:::avoindata-${EnvironmentName}-datasets"
                  - !Sub "arn:aws:s3:::avoindata-${EnvironmentName}-datasets/*"
              - Effect: Allow
                Action:
                  - ssm:DescribeAssociation
                  - ssm:GetDeployablePatchSnapshotForInstance
                  - ssm:GetDocument
                  - ssm:GetManifest
                  - ssm:GetParameters
                  - ssm:ListAssociations
                  - ssm:ListInstanceAssociations
                  - ssm:PutInventory
                  - ssm:PutComplianceItems
                  - ssm:PutConfigurePackageResult
                  - ssm:UpdateAssociationStatus
                  - ssm:UpdateInstanceAssociationStatus
                  - ssm:UpdateInstanceInformation
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2messages:AcknowledgeMessage
                  - ec2messages:DeleteMessage
                  - ec2messages:FailMessage
                  - ec2messages:GetEndpoint
                  - ec2messages:GetMessages
                  - ec2messages:SendReply
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeInstanceStatus
                Resource: "*"
              - Effect: Allow
                Action:
                  - ds:CreateComputer
                  - ds:DescribeDirectories
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeTags
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:${EnvironmentName}-web"
              - Effect: Allow
                Action:
                  - s3:GetEncryptionConfiguration
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - arn:aws:s3:::aws-ssm-eu-west-1/*
                  - arn:aws:s3:::aws-windows-downloads-eu-west-1/*
                  - arn:aws:s3:::amazon-ssm-eu-west-1/*
                  - arn:aws:s3:::amazon-ssm-packages-eu-west-1/*
                  - arn:aws:s3:::eu-west-1-birdwatcher-prod/*

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  PublicALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub avoindata-${EnvironmentName}-lb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicALBSecurityGroup
      Subnets:
        !If
          [ NumberOfSubnets1,
          [ !Select [ 0, !Ref PublicALBSubnets ] ],
          !If
            [ NumberOfSubnets2,
            [ !Select [ 0, !Ref PublicALBSubnets ], !Select [ 1, !Ref PublicALBSubnets ] ],
            !If
              [ NumberOfSubnets3,
              [ !Select [ 0, !Ref PublicALBSubnets ], !Select [ 1, !Ref PublicALBSubnets ], !Select [ 2, !Ref PublicALBSubnets ] ],
              !If
                [ NumberOfSubnets4,
                [ !Select [ 0, !Ref PublicALBSubnets ], !Select [ 1, !Ref PublicALBSubnets ], !Select [ 2, !Ref PublicALBSubnets ], !Select [ 3, !Ref PublicALBSubnets ] ],
                !If
                  [ NumberOfSubnets5,
                  [ !Select [ 0, !Ref PublicALBSubnets ], !Select [ 1, !Ref PublicALBSubnets ], !Select [ 2, !Ref PublicALBSubnets ], !Select [ 3, !Ref PublicALBSubnets ], !Select [ 4, !Ref PublicALBSubnets ] ],
                  [ !Select [ 0, !Ref PublicALBSubnets ], !Select [ 1, !Ref PublicALBSubnets ], !Select [ 2, !Ref PublicALBSubnets ], !Select [ 3, !Ref PublicALBSubnets ], !Select [ 4, !Ref PublicALBSubnets ], !Select [ 5, !Ref PublicALBSubnets ] ]
                  ]
                ]
              ]
            ]
          ]
      Tags:
        - Key: Name
          Value: !Sub avoindata-${EnvironmentName}-lb

  PublicALBListenerSslCertificate:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref PublicALBCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicALBTargetGroupHTTP
      LoadBalancerArn: !Ref PublicALB
      Port: 443
      Protocol: HTTPS

  PublicALBTargetGroupHTTP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '301'
      Name: !Sub avoindata-${EnvironmentName}-tg-http
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub avoindata-${EnvironmentName}-loadbalancer-targetGroup-http
      Targets:
        - Id: !Ref EC2Instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc

  PublicALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS from everywhere
      SecurityGroupIngress:
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc

  PublicALBDNSNameParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub /${EnvironmentName}/web/public_alb_address
      Type: "String"
      Value: !GetAtt PublicALB.DNSName

  PublicALBARN:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub /${EnvironmentName}/web/public_alb_arn
      Type: "String"
      Value: !Ref PublicALB

Outputs:
  InstanceId:
    Value: !Ref EC2Instance
  AZ:
    Value: !GetAtt EC2Instance.AvailabilityZone
  PublicALBDNSName:
    Value: !GetAtt PublicALB.DNSName
