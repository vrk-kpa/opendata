---
AWSTemplateFormatVersion: '2010-09-09'
Description: opendata databases

Parameters:
  EnvironmentName:
    Type: String
    Default: infratest
    AllowedValues:
      - infratest
      - dev
      - alpha
      - beta
      - www
      - prod

  DatabaseSubnets:
    Description: Database and EFS mount target subnets
    Type: List<AWS::EC2::Subnet::Id>
  AdminUsername:
    Description: Database admin username
    Type: String
    MinLength: 1
    Default: ckan_admin
  AdminPassword:
    Description: Database admin password
    Type: String
    NoEcho: true
    MinLength: 8
  SnapshotIdentifier:
    Description: Optional snapshot to restore
    Type: String
    Default: ""
  BackupRetention:
    Description: The number of days to retain automated backups. Setting this parameter to 0 disables automated backups.
    Type: String
    Default: "7"
    AllowedPattern: ^([0-9]|[12][0-9]|3[05])$
    ConstraintDescription: Valid range is 0-35
  DBParameterGroup:
    Description: Database parameter group
    Type: String
    Default: "opendata-postgres10"
  UpgradeMajorVersion:
    Description: "Define if major version upgrades are allowed"
    Type: String
    Default: false
    AllowedValues: [true, false]
  PerformanceInsights:
    Description: "Define if PerformanceInsights is enabled (requires Postgres 10)"
    Type: String
    Default: false
    AllowedValues: [true, false]
  DBEngineVersion:
      Description: "Database engine version"
      Type: String
      Default: "10.6"
  DbInstance:
      Description: "Database instance type"
      Type: String
      Default: "db.t2.small"
  MultiAZSetup:
    Description: Specifies if the DB instance is a Multi-AZ deployment
    Type: String
    Default: false
    AllowedValues: [true, false]
  ClamAvLambdaArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ClamAvRoleArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
  Vpc:
    Description: Select an existing Vpc
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>'
  DBAllocatedStorage:
    Description: "The size of the database (GiB)"
    Type: Number
    Default: '50'
  MaxAllocatedStorage:
    Description: "The max size of the database (GiB)"
    Type: Number
    Default: '200'

Conditions:
  UseDBSnapshot: !Not [!Equals [!Ref SnapshotIdentifier,  ""]]

Resources:
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref DBAllocatedStorage
      MaxAllocatedStorage: !Ref MaxAllocatedStorage
      Engine: postgres
      BackupRetentionPeriod: !Ref BackupRetention
      DBInstanceClass: !Ref DbInstance
      EngineVersion: !Ref DBEngineVersion
      AllowMajorVersionUpgrade: !Ref UpgradeMajorVersion
      EnablePerformanceInsights: !Ref PerformanceInsights
      DBParameterGroupName: !Ref DBParameterGroup
      MonitoringInterval: 60
      MonitoringRoleArn: !GetAtt ["Role", "Arn"]
      EnableCloudwatchLogsExports:
        - postgresql
      MultiAZ: !Ref MultiAZSetup
      StorageType: gp2
      DBInstanceIdentifier: !Sub avoindata-${EnvironmentName}
      DBSnapshotIdentifier: !If [ UseDBSnapshot, !Ref SnapshotIdentifier, !Ref "AWS::NoValue" ]
      MasterUsername: !Ref AdminUsername
      MasterUserPassword: !Ref AdminPassword
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId
      DeletionProtection: true

  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole'
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'rds.amazonaws.com'
          Action: 'sts:AssumeRole'
        - Effect: Allow
          Principal:
            Service: 'monitoring.rds.amazonaws.com'
          Action: 'sts:AssumeRole'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable DB access
      VpcId: !Ref Vpc

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for databases
      SubnetIds: !Ref DatabaseSubnets

  DatasetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub avoindata-${EnvironmentName}-datasets
      AccessControl: PublicRead
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !Ref ClamAvLambdaArn
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
            - GET
            AllowedOrigins:
              - "*"

  DatasetBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DatasetBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${DatasetBucket}/*"
            Principal: "*"
          - Effect: Allow
            Principal:
              AWS: !Ref ClamAvRoleArn
            Action:
            - s3:DeleteObject
            - s3:DeleteObjectTagging
            - s3:GetObjectTagging
            - s3:PutObjectTagging
            Resource: !Sub "arn:aws:s3:::${DatasetBucket}/*"

  EFSFileSystem:
    Type: AWS::EFS::FileSystem

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt EFSSecurityGroup.GroupId
      SubnetId: !Select [0, !Ref DatabaseSubnets]

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt EFSSecurityGroup.GroupId
      SubnetId: !Select [1, !Ref DatabaseSubnets]

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable EFS access
      VpcId: !Ref Vpc

Outputs:
  DatabaseSecurityGroup:
    Value: !Ref DatabaseSecurityGroup
  DatasetBucket:
    Value: !Ref DatasetBucket
