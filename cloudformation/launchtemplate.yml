AWSTemplateFormatVersion: "2010-09-09"
Description: opendata instance launch template and autoscale group

Parameters:
  EnvironmentName:
    Description: Name of the environment (infratest, beta, prod)
    Type: 'AWS::SSM::Parameter::Value<String>'
  WebAmiImageId:
    Description: AMI image ID to use for web instance launch template
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  ScheduledAmiImageId:
    Description: AMI image ID to use for web instance launch template
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  ScheduledInstanceType:
    Description: EC2 instance type for the application servers
    Type: 'AWS::SSM::Parameter::Value<String>'
  WebInstanceType:
    Description: EC2 instance type for the application servers
    Type: 'AWS::SSM::Parameter::Value<String>'
  AsgDesiredSize:
    Description: Desired size of web instance ASG
    Type: 'AWS::SSM::Parameter::Value<String>'
  AsgMaxSize:
    Description: Maximum size of web instance ASG
    Type: 'AWS::SSM::Parameter::Value<String>'
  AsgMinSize:
    Description: Minimum size of web instance ASG
    Type: 'AWS::SSM::Parameter::Value<String>'
  EFSFileSystem:
    Description: Name of the EFS filesystem
    Type: 'AWS::SSM::Parameter::Value<String>'
  HookTimeout:
    Description: ASG user data lifecycle hook timeout in seconds
    Type: 'AWS::SSM::Parameter::Value<String>'
  WebHealthCheckGracePeriod:
    Description: Grace period in seconds for web ASG ELB health check
    Type: 'AWS::SSM::Parameter::Value<String>'
  ScheduledHealthCheckGracePeriod:
    Description: Grace period in seconds for scheduled ASG ELB health check
    Type: 'AWS::SSM::Parameter::Value<String>'
  WebTargetGroupArn:
    Description: Target group ARN of web instances
    Type: 'AWS::SSM::Parameter::Value<String>'
  SolrTargetGroupArn:
    Description: Target group ARN of Solr instance
    Type: 'AWS::SSM::Parameter::Value<String>'


Resources:
  WebInstanceLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeType: gp2
              VolumeSize: 20
              DeleteOnTermination: true
        IamInstanceProfile:
          Arn:
            Fn::ImportValue:
              !Sub "avoindata-${EnvironmentName}-instanceprofile"
        ImageId: !Ref WebAmiImageId
        InstanceType: !Ref WebInstanceType
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "avoindata-${EnvironmentName}-web-instancesecuritygroupid"
          - Fn::ImportValue:
              !Sub "avoindata-${EnvironmentName}-instancesecuritygroupid"
        UserData: !Base64
          "Fn::Sub": |
            #!/bin/bash
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
            export HOME=/root
            echo '${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,_netdev,x-systemd.after=network-online.target,nofail 0 0' >>/etc/fstab
            echo '/mnt/ytp_files /srv/ytp/files none defaults,bind,nofail,x-systemd.after=mnt.mount 0 0' >>/etc/fstab
            mount -a -t nfs4
            mkdir -p /srv/ytp/files /mnt/ytp_files
            mount /srv/ytp/files
            cd /root/ytp/ansible
            flock -x /mnt/ansible.lock -c 'ansible-playbook -i inventories/${EnvironmentName} web-server.yml --tags configure --skip-tags cron,supervisor'
            until [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost/data/health)" == "200" ]]; do sleep 10; done
            aws autoscaling complete-lifecycle-action \
              --auto-scaling-group-name $(aws autoscaling describe-auto-scaling-instances \
                --instance-ids $(curl -s http://169.254.169.254/latest/meta-data/instance-id) \
                --region ${AWS::Region} --query 'AutoScalingInstances[0].AutoScalingGroupName') \
              --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id) \
              --lifecycle-action-result CONTINUE \
              --lifecycle-hook-name web-asg-hook \
              --region ${AWS::Region}
            until [ "$state" == "\"healthy\"" ]; do state=$(aws --region ${AWS::Region} elbv2 describe-target-health \
              --target-group-arn ${WebTargetGroupArn} \
              --targets Id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id) \
              --query 'TargetHealthDescriptions[0].TargetHealth.State'); sleep 10; done
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}

  ScheduledInstanceLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeType: gp2
              VolumeSize: 20
              DeleteOnTermination: true
        IamInstanceProfile:
          Arn:
            Fn::ImportValue:
              !Sub "avoindata-${EnvironmentName}-instanceprofile"
        ImageId: !Ref ScheduledAmiImageId
        InstanceType: !Ref ScheduledInstanceType
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "avoindata-${EnvironmentName}-scheduled-instancesecuritygroupid"
          - Fn::ImportValue:
              !Sub "avoindata-${EnvironmentName}-instancesecuritygroupid"
        UserData: !Base64
          "Fn::Sub": |
            #!/bin/bash
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
            export HOME=/root
            echo '${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,_netdev,x-systemd.after=network-online.target,nofail 0 0' >>/etc/fstab
            echo '/mnt/ytp_files /srv/ytp/files none defaults,bind,nofail,x-systemd.after=mnt.mount 0 0' >>/etc/fstab
            mount -a -t nfs4
            mkdir -p /srv/ytp/files /mnt/ytp_files
            mount /srv/ytp/files
            cd /root/ytp/ansible
            ansible-playbook -i inventories/${EnvironmentName} scheduled-server.yml --tags configure,cron,supervisor
            . /usr/lib/ckan/default/bin/activate
            /usr/lib/ckan/default/bin/paster --plugin=ckan search-index rebuild --config=/etc/ckan/default/production.ini -i

            aws autoscaling complete-lifecycle-action \
              --auto-scaling-group-name $(aws autoscaling describe-auto-scaling-instances \
                --instance-ids $(curl -s http://169.254.169.254/latest/meta-data/instance-id) \
                --region ${AWS::Region} --query 'AutoScalingInstances[0].AutoScalingGroupName') \
              --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id) \
              --lifecycle-action-result CONTINUE \
              --lifecycle-hook-name scheduled-asg-hook \
              --region ${AWS::Region}

            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ScheduledAutoScalingGroup --region ${AWS::Region}

  ScheduledAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ScheduledInstanceLaunchTemplate
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    Properties:
      HealthCheckGracePeriod: !Ref ScheduledHealthCheckGracePeriod
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref ScheduledInstanceLaunchTemplate
        Version: !GetAtt ScheduledInstanceLaunchTemplate.LatestVersionNumber
      LifecycleHookSpecificationList:
        - HeartbeatTimeout: !Ref HookTimeout
          LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"
          LifecycleHookName: scheduled-asg-hook
      TargetGroupARNs:
        - Fn::ImportValue:
            !Sub "avoindata-${EnvironmentName}-solralbtargetgrouparn"
      MaxSize: "1"
      MinSize: "1"
      VPCZoneIdentifier:
        - !ImportValue vpc-SubnetsPrivate
      Tags:
      - Key: Name
        Value: !Sub avoindata-${EnvironmentName}-scheduled-autoscaling-group
        PropagateAtLaunch: true

  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref AsgDesiredSize
        Timeout: PT60M
    Properties:
      HealthCheckGracePeriod: !Ref WebHealthCheckGracePeriod
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WebInstanceLaunchTemplate
        Version: !GetAtt WebInstanceLaunchTemplate.LatestVersionNumber
      LifecycleHookSpecificationList:
        - HeartbeatTimeout: !Ref HookTimeout
          LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"
          LifecycleHookName: web-asg-hook
      TargetGroupARNs:
        - Fn::ImportValue:
            !Sub "avoindata-${EnvironmentName}-publicalbtargetgrouparn"
      MaxSize: !Ref AsgMaxSize
      MinSize: !Ref AsgMinSize
      DesiredCapacity: !Ref AsgDesiredSize
      VPCZoneIdentifier:
        - !ImportValue vpc-SubnetsPrivate
      Tags:
      - Key: Name
        Value: !Sub avoindata-${EnvironmentName}-web-autoscaling-group
        PropagateAtLaunch: true
