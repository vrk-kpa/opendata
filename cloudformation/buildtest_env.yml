---
AWSTemplateFormatVersion: 2010-09-09

Description: Creates dedicated VPC for opendata build testing and S3 bucket for secrets with a read access group. Adds policies required for running Packer, and attaches them to the created IAM group. Note that the users needs to be manually added.

Parameters:

  ProductionAccountId:
    Description: Id of production account
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /build/productionaccountid

  AvailabilityZone1:
    Description: The first availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone

  SSHFrom:
    Description: Limit SSH access to public CIDR IP block
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0

  BucketName:
    Description: Used for storing build test secrets
    Type: String
    Default: avoindata-buildtest-secrets

  BuildTestGroupName:
    Description: IAM group having read access to bucket
    Type: String
    Default: ypt-buildtesters

  BuildTestUserName:
    Description: Name of buildtest IAM user
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /build/buildtestusername

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Region Availability Zones
        Parameters:
          - AvailabilityZone1
      - Label:
          default: Secrets bucket configuration
        Parameters:
          - BucketName
          - BuildTestGroupName

    ParameterLabels:
      AvailabilityZone1:
        default: Availability Zone 1

Mappings:

  # Maps CIDR blocks to VPC and various subnets
  CIDRMap:
    VPC:
      CIDR: 10.50.0.0/16
    Public1:
      CIDR: 10.50.0.0/24

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [CIDRMap, VPC, CIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ CIDRMap, Public1, CIDR ]
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet1"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-public-igw"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  BuildTestSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access ssh to the host(s)
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: !Ref SSHFrom
        IpProtocol: tcp
        ToPort: 22
        FromPort: 22
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 80
        FromPort: 80
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 80
        FromPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
      - CidrIp: 0.0.0.0/0
        IpProtocol: udp
        ToPort: 123
        FromPort: 123
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-BuildTestSecurityGroup"

  BuildTestSecretsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${BucketName}
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  InvokeAmiCopyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: InvokeAmiCopyFunctionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                !Sub 'arn:aws:iam::${AWS::AccountId}:user/${BuildTestUserName}'
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AssumeInvokeAmiCopyFunctionRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Resource:
                  - !Sub 'arn:aws:iam::${ProductionAccountId}:role/CopyAmiLambdaExecutionRole'

  InvokeDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: InvokeDeploymentRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                !Sub 'arn:aws:iam::${AWS::AccountId}:user/${BuildTestUserName}'
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AssumeInvokeDeploymentRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Resource:
                  - !Sub 'arn:aws:iam::${ProductionAccountId}:role/DeploymentRole'


  SecretBucketGetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "SecretsBucketGetPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - "arn:aws:s3:::opendata-packer-secrets"
                  - "arn:aws:s3:::opendata-packer-secrets/*"

  BuildTestInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref "SecretBucketGetRole"

  BuildTestGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub ${BuildTestGroupName}

  PackerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policies required for Packer
      Groups:
        - !Ref BuildTestGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachVolume'
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:CopyImage'
              - 'ec2:CreateImage'
              - 'ec2:CreateKeypair'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:CreateSnapshot'
              - 'ec2:CreateTags'
              - 'ec2:CreateVolume'
              - 'ec2:DeleteKeyPair'
              - 'ec2:DeleteSecurityGroup'
              - 'ec2:DeleteSnapshot'
              - 'ec2:DeleteVolume'
              - 'ec2:DeregisterImage'
              - 'ec2:DescribeImageAttribute'
              - 'ec2:DescribeImages'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeInstanceStatus'
              - 'ec2:DescribeRegions'
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeVolumes'
              - 'ec2:DetachVolume'
              - 'ec2:GetPasswordData'
              - 'ec2:ModifyImageAttribute'
              - 'ec2:ModifyInstanceAttribute'
              - 'ec2:ModifySnapshotAttribute'
              - 'ec2:RegisterImage'
              - 'ec2:RunInstances'
              - 'ec2:StopInstances'
              - 'ec2:TerminateInstances'
              - 'ec2:AssociateIamInstanceProfile'
              - 'ec2:ReplaceIamInstanceProfileAssociation'
              - 'ec2:DisassociateIamInstanceProfile'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'iam:GetRole'
              - 'iam:PassRole'
            Resource: !GetAtt SecretBucketGetRole.Arn


  BuildTestBucketPolicy:
    Type: AWS::IAM::Policy
    DependsOn: BuildTestGroup
    Properties:
      Groups:
        - !Sub ${BuildTestGroupName}
      PolicyName: "BuildTestBucketPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:ListBucket"
            Resource:
              - !Sub "arn:aws:s3:::${BucketName}"
          -
            Effect: "Allow"
            Action:
              - "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::${BucketName}/*"

  DatasetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: avoindata-buildtest-datasets
      AccessControl: PublicRead
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
            - GET
            AllowedOrigins:
              - "*"

  DatasetBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DatasetBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${DatasetBucket}/*"
            Principal: "*"

Outputs:

  Name:
    Description: VPC Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcID"

  VpcCidr:
    Description: Vpc cidr block
    Value: !FindInMap [ CIDRMap, VPC, CIDR ]
    Export:
      Name: !Sub "${AWS::StackName}-vpc-cidr"

  PublicSubnet1:
    Description: Public subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1ID"

  BuildTestSecurityGroup:
    Description: Security group ID for build test host(s)
    Value: !GetAtt BuildTestSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-BuildTestGroupID"

  BuildTestSecretsBucket:
    Description: ARN for build test secrets bucket
    Value: !GetAtt BuildTestSecretsBucket.Arn
