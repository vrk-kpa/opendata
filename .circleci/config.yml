version: 2.1

orbs:
  slack: circleci/slack@3.2.0

commands:
  slack_notification:
    description: "Send job status notification to Slack"
    parameters:
      branches:
        type: string
        default: "master"
      fail_only:
        type: boolean
        default: true
    steps:
      - run:
          name:  Get commit message to environment variable
          command: |
            echo 'export GIT_COMMIT_MESSAGE=$(git log --format=oneline -n 1 $CIRCLE_SHA1 | cut -d " " -f2-)' >> $BASH_ENV
          working_directory: ~/project/
      - slack/status:
          fail_only: << parameters.fail_only >>
          only_for_branches: << parameters.branches >>
          webhook: $SLACK_WEB_HOOK
          include_visit_job_action: true
          include_job_number_field: true
          failure_message: ':red_circle: A $CIRCLE_JOB job triggered by $CIRCLE_USERNAME has failed! ($GIT_COMMIT_MESSAGE)'
          success_message: ':tada: A $CIRCLE_JOB job  triggered by $CIRCLE_USERNAME has succeeded! ($GIT_COMMIT_MESSAGE)'


jobs:
  packer-web:
    docker:
      - image: circleci/python

    steps:
      - checkout
      - run: echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
          bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
          ' >> ~/.ssh/known_hosts
      - run: git submodule update --init --recursive
      - run: sudo apt-get update && sudo apt-get install rsync
      - run: sudo pip install ansible

      - run: |
          mkdir ~/logs

      - run:
          name: Install packer
          command: wget https://releases.hashicorp.com/packer/1.6.4/packer_1.6.4_linux_amd64.zip -O /tmp/packer.zip && sudo unzip /tmp/packer.zip -d /usr/local/bin/

      - run:
          name: Set circle ip to env
          command: |
            echo 'export BUILDER_CIDR=$(wget -qO- http://checkip.amazonaws.com)' >> $BASH_ENV

      - run:
          name: Validate packer file
          command: packer validate ../packer/packer-web.json
          working_directory: ~/project/ansible

      - run:
          name: Build ami
          command: "packer build ../packer/packer-web.json >> ~/logs/packer_build.log 2>&1"
          no_output_timeout: 60m
          working_directory: ~/project/ansible

      - persist_to_workspace:
          name: Save packer-web manifest
          root: ~/project
          paths:
            - ansible/manifest-web.json

      - run:
          name: Save ami id to file
          command: cat manifest-web.json | jq -r .builds[0].artifact_id |  cut -d':' -f2 > ~/project/web_ami_id
          working_directory: ~/project/ansible

      - store_artifacts:
          path: ~/logs

      - store_artifacts:
          path: ~/project/web_ami_id

      - persist_to_workspace:
          name: web_ami_id
          root: ~/project
          paths:
            - web_ami_id

      - slack_notification

  ansible-web:
    docker:
      - image: circleci/python

    steps:
      - checkout
      - run: echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
          bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
          ' >> ~/.ssh/known_hosts
      - run: git submodule update --init --recursive
      - run: sudo apt-get update && sudo apt-get install rsync
      - run: sudo pip install boto awscli
      - run: sudo pip install ansible==2.9.22

      - run:
          name: Copy private key for ec2 usage
          command: aws s3 cp --quiet s3://$AWS_PRIVATE_KEY_S3_PATH ~/.ssh/opendata-buildtest-key.pem
          working_directory: ~/project/

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run:
          name: Set ami id
          command: |
            echo 'export AWS_EC2_IMAGE=$(cat ~/project/web_ami_id)' >> $BASH_ENV

      - run:
          name: Run build test playbook
          command: "ansible-playbook --skip-tags 'dependency_role' --tags 'configure' circleci_build_test.yml >> ~/logs/ansible-web_test.log 2>&1"
          no_output_timeout: 60m
          working_directory: ~/project/ansible

      - run: |
          cp /tmp/instance_public_ip ~/project/
          cp /tmp/instance_ids ~/project/

      - persist_to_workspace:
          name: public ip
          root: ~/project
          paths:
            - instance_public_ip
            - instance_ids

      - store_artifacts:
          path: ~/logs

      - slack_notification

  cypress-web:
    docker:
      - image: circleci/python

    steps:
      - checkout
      - run: echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
          bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
          ' >> ~/.ssh/known_hosts
      - run: git submodule update --init --recursive
      - run: sudo pip install boto awscli
      - run: sudo pip install ansible

      - restore_cache:
          keys:
            - v2-cypress-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v2-cypress-deps-{{ .Branch }}
            - v2-cypress-deps

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run: sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - run: curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -

      - run: sudo apt-get install -y nodejs

      - run:
          name: Install Dependencies
          command: npm ci
          working_directory: ~/project/

      - save_cache:
          key: v2-cypress-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/project/node_modules

      - run:
          name: Set instance public for Cypress
          command: |
            echo 'export CYPRESS_BASE_URL=http://$(cat ~/project/instance_public_ip)' >> $BASH_ENV
            echo 'export CYPRESS_resetDB=false' >> $BASH_ENV
            echo 'export CYPRESS_cloudStorageEnabled=true' >> $BASH_ENV

      - run:
          name: Run cypress tests
          command: $(npm bin)/cypress run --record --key $CYPRESS_KEY

        # Cleanup task to ensure that created instances will be terminated.
      - run:
          name: Additional cleanup for EC2 instances
          command: "ansible-playbook ansible/circleci_cleanup.yml  --extra-vars 'instance_ids_file_path=~/project/instance_ids' >> ~/logs/ec2_cleanup.log 2>&1"
          working_directory: ~/project/
          when: always

      - store_artifacts:
          path: ~/logs

      - slack_notification

  packer-scheduled:
    docker:
      - image: circleci/python

    steps:
      - checkout
      - run: echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
          bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
          ' >> ~/.ssh/known_hosts
      - run: git submodule update --init --recursive
      - run: sudo apt-get update && sudo apt-get install rsync
      - run: sudo pip install boto awscli
      - run: sudo pip install ansible

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run:
          name: Install packer
          command: wget https://releases.hashicorp.com/packer/1.6.4/packer_1.6.4_linux_amd64.zip -O /tmp/packer.zip && sudo unzip /tmp/packer.zip -d /usr/local/bin/

      - run:
          name: Set circle ip to env
          command: |
            echo 'export BUILDER_CIDR=$(wget -qO- http://checkip.amazonaws.com)' >> $BASH_ENV

      - run:
          name: Validate packer file
          command: packer validate ../packer/packer-scheduled.json
          working_directory: ~/project/ansible

      - run:
          name: Build ami
          command: "packer build ../packer/packer-scheduled.json >> ~/logs/packer_build.log 2>&1"
          no_output_timeout: 60m
          working_directory: ~/project/ansible

      - persist_to_workspace:
          name: Save packer-scheduled manifest
          root: ~/project
          paths:
            - ansible/manifest-scheduled.json

      - run:
          name: Save ami id to file
          command: cat manifest-scheduled.json | jq -r .builds[0].artifact_id |  cut -d':' -f2 > ~/project/scheduled_ami_id
          working_directory: ~/project/ansible

      - store_artifacts:
          path: ~/logs

      - store_artifacts:
          path: ~/project/scheduled_ami_id

      - persist_to_workspace:
          name: scheduled_ami_id
          root: ~/project
          paths:
            - scheduled_ami_id

      - slack_notification

  copy-web-ami:
    docker:
      - image: circleci/python

    steps:
      - checkout

      - run: sudo pip install boto awscli

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run:
          name: Copy AMI to production account
          command: |
            ./copy_ami.sh ~/project/ansible/manifest-web.json | tail -1 | cut -d'"' -f2 > ~/project/web_image_ami_copy
          no_output_timeout: 10m
          working_directory: ~/project/amicopy

      - persist_to_workspace:
          root: ~/project
          paths:
            - web_image_ami_copy

      - slack_notification

  copy-scheduled-ami:
    docker:
      - image: circleci/python

    steps:
      - checkout

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run: sudo pip install boto awscli

      - run:
          name: Copy AMI to production account
          command: |
            ./copy_ami.sh ~/project/ansible/manifest-scheduled.json | tail -1 | cut -d'"' -f2 > ~/project/scheduled_image_ami_copy
          no_output_timeout: 10m
          working_directory: ~/project/amicopy

      - persist_to_workspace:
          root: ~/project
          paths:
            - scheduled_image_ami_copy

      - slack_notification

  beta-deploy:
    docker:
      - image: circleci/python

    environment:
      SENTRY_ORG: gofore-b3
      SENTRY_PROJECT: avoindata

    steps:

      - checkout

      - run:
          name: Skip deployment if commit is not latest in master
          command: |
            if [ $(git rev-parse @) != $(git rev-parse origin) ]; then
              echo "Commit is not latest in master, skipping deployment"
              circleci-agent step halt
            fi

      - run: sudo pip install boto awscli

      - run: |
          mkdir ~/logs

      - attach_workspace:
          at: ~/project

      - run:
          name: Check current stack update status
          command: |
            source ~/project/deploy/assume_dev_deploy_role.sh > /dev/null 2>&1
            until aws cloudformation describe-stacks --stack-name "beta-asg-lt" --query 'Stacks[0].StackStatus' | egrep -q 'COMPLETE"$'; do sleep 5 ; done
          no_output_timeout: 15m

      - run:
          name: Update AMI ids in parameter store
          command: |
            source ~/project/deploy/assume_dev_deploy_role.sh > /dev/null 2>&1
            aws ssm put-parameter --name /beta/web/amiid --type String --overwrite --allowed-pattern "^ami-[a-z0-9]{17}$" --value $(cat ~/project/web_ami_id) && \
            aws ssm put-parameter --name /beta/scheduled/amiid --type String --overwrite --allowed-pattern "^ami-[a-z0-9]{17}$" --value $(cat ~/project/scheduled_ami_id)

      - run:
          name: Start maintenance break in Dynatrace
          command: |
            curl -X POST "https://$DYNATRACE_SERVICE_DOMAIN/api/v1/maintenance?Api-Token=$DYNATRACE_AUTH_TOKEN" \
              -H "Content-Type: application/json" \
              -H "accept: application/json" \
              -d '{
                "id": "'"$CIRCLE_BUILD_NUM"'",
                "type": "Planned",
                "description": "Maintenance break for CircleCI build '"$CIRCLE_BUILD_NUM"'",
                "suppressAlerts": true,
                "suppressProblems": true,
                "scope": {
                    "matches": [
                    {
                      "type": "APPLICATION",
                      "tags": [
                        {
                          "context": "CONTEXTLESS",
                          "key": "beta"
                        }
                      ]
                    }
                  ]
                 },
              "schedule": {
                "type": "Once",
                "timezoneId": "UTC",
                "maintenanceStart": "'"$(date -u +'%F %R')"'",
                "maintenanceEnd": "'"$(date -u --date='30 min' +'%F %R')"'"
              }
            }' > ~/logs/dynatrace_maintenance_start.log 2>&1

      - run:
          name: Update stack
          command: |
            source ~/project/deploy/assume_dev_deploy_role.sh > /dev/null 2>&1
            aws cloudformation update-stack \
            --stack-name "beta-asg-lt" \
            --template-body file://../cloudformation/launchtemplate.yml \
            --parameters ParameterKey=WebTargetGroupArn,ParameterValue=/beta/web/public_alb_tg_arn \
              ParameterKey=WebInstanceType,ParameterValue=/beta/web/instance_type \
              ParameterKey=WebHealthCheckGracePeriod,ParameterValue=/beta/web/albgraceperiod \
              ParameterKey=WebAmiImageId,ParameterValue=/beta/web/amiid \
              ParameterKey=SolrTargetGroupArn,ParameterValue=/beta/web/private_alb_tg_arn \
              ParameterKey=ScheduledInstanceType,ParameterValue=/beta/scheduled/instance_type \
              ParameterKey=ScheduledAmiImageId,ParameterValue=/beta/scheduled/amiid \
              ParameterKey=ScheduledHealthCheckGracePeriod,ParameterValue=/beta/scheduled/albgraceperiod \
              ParameterKey=HookTimeout,ParameterValue=/beta/web/lifecycle_hook_timeout \
              ParameterKey=EnvironmentName,ParameterValue=/beta/web/environment_name \
              ParameterKey=EFSFileSystem,ParameterValue=/beta/web/efs_file_system \
              ParameterKey=AsgDesiredSize,ParameterValue=/beta/web/asgdesiredsize \
              ParameterKey=AsgMinSize,ParameterValue=/beta/web/asgminsize \
              ParameterKey=AsgMaxSize,ParameterValue=/beta/web/asgmaxsize > ~/logs/beta_stack_update.log 2>&1
            aws cloudformation wait stack-update-complete --stack-name "beta-asg-lt"
          working_directory: ~/project/deploy
          no_output_timeout: 60m

      - run:
          name: Create a release on sentry
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits --auto $SENTRY_RELEASE
            sentry-cli releases finalize $SENTRY_RELEASE

      - run:
          name: Notify Dynatrace
          command: |
            curl -X POST "https://$DYNATRACE_SERVICE_DOMAIN/api/v1/events?Api-Token=$DYNATRACE_AUTH_TOKEN" \
              -H "Content-Type: application/json" \
              -H "accept: application/json" \
              -d '{
                "eventType": "CUSTOM_DEPLOYMENT",
                "attachRules": {
                    "tagRule": {
                        "meTypes": [
                            "APPLICATION"
                        ],
                        "tags": "beta"
                    }
                },
                "deploymentName": "CircleCI deployment",
                "deploymentVersion": "'"$CIRCLE_SHA1"'",
                "ciBackLink": "'"https://circleci.com/gh/vrk-kpa/opendata/$CIRCLE_BUILD_NUM"'",
                "source": "CircleCI",
                "customProperties": {
                    "CircleCI Build Number": "'"$CIRCLE_BUILD_NUM"'",
                    "Release": "'"$CIRCLE_TAG"'"
                }
            }' > ~/logs/dynatrace_notification.log 2>&1

      - run:
          name: End maintenance break in Dynatrace
          command: |
            curl -X DELETE "https://$DYNATRACE_SERVICE_DOMAIN/api/v1/maintenance/$CIRCLE_BUILD_NUM?Api-Token=$DYNATRACE_AUTH_TOKEN" \
              -H "Content-Type: application/json" \
              -H "accept: application/json" > ~/logs/dynatrace_maintenance_end.log 2>&1
          when: always

      - store_artifacts:
          path: ~/logs

      - slack_notification:
          fail_only: false

  clamav-build:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout

      - setup_remote_docker

      - run: sudo pip install boto3 awscli aws-sam-cli pip==19.2.3

      - run:
          name: Build and tag ClamAV container
          command: |
            docker build -t clamav-scanner:latest ~/project/clamav/clamav-docker

      - run:
          name: Build lambdas
          command: |
            sam build -s ~/project/clamav/src
          working_directory: ~/project/clamav

      - slack_notification

  clamav-deploy:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout

      - setup_remote_docker

      - run: sudo pip install boto3 awscli aws-sam-cli pip==19.2.3

      - run:
          name: Build, tag and deploy ClamAV container
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            docker build -t clamav-scanner:latest ~/project/clamav/clamav-docker &&\
            $(aws ecr get-login --no-include-email --region eu-west-1) &&\
            docker tag clamav-scanner:latest ${AWS_PRODUCTION_ACCOUNT_ID}.dkr.ecr.eu-west-1.amazonaws.com/clamav-scanner:latest &&\
            docker push $_
          no_output_timeout: 20m


      - run:
          name: Build lambdas
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            sam build -s ~/project/clamav/src
          working_directory: ~/project/clamav

      - run:
          name: Package SAM template
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            sam package --output-template-file packaged.yaml \
            --s3-bucket avoindata-clamav-scan
          working_directory: ~/project/clamav

      - run:
          name: Deploy SAM template
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            aws cloudformation deploy --template-file packaged.yaml \
            --stack-name clamav-scan \
            --parameter-overrides \
              SlackPath=/clamav/slack_path \
              SlackChannel=/clamav/slack_channel \
              SlackUser=/clamav/slack_user \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
          working_directory: ~/project/clamav

      - slack_notification

  prod-deploy:
    docker:
      - image: circleci/python

    steps:

      - checkout

      - run: |
          mkdir ~/logs

      - run: sudo pip install boto awscli

      - run:
          name: Check current stack update status
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            until aws cloudformation describe-stacks --stack-name "prod-asg-lt" --query 'Stacks[0].StackStatus' | egrep -q 'COMPLETE"$'; do sleep 5 ; done
          no_output_timeout: 20m

      - run:
          name: Check AMI copy completion
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            until aws ec2 describe-images \
            --filters \
              "Name=tag:Commit,Values=${CIRCLE_SHA1}" \
              "Name=name,Values=opendata-web*" \
            --query 'Images[0].State' |grep -q "\"available\""; do sleep 5 ; done && \
            until aws ec2 describe-images \
            --filters \
              "Name=tag:Commit,Values=${CIRCLE_SHA1}" \
              "Name=name,Values=opendata-scheduled*" \
            --query 'Images[0].State' |grep -q "\"available\""; do sleep 5 ; done
          no_output_timeout: 30m

      - run:
          name: Update AMI id parameter in parameter store
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            export web_ami_id=$(aws ec2 describe-images \
              --filters \
                "Name=tag:Commit,Values=${CIRCLE_SHA1}" \
                "Name=name,Values=opendata-web*" \
              --query "Images[0].ImageId" | sed 's/"//g')
            export scheduled_ami_id=$(aws ec2 describe-images \
              --filters \
                "Name=tag:Commit,Values=${CIRCLE_SHA1}" \
                "Name=name,Values=opendata-scheduled*" \
              --query "Images[0].ImageId" | sed 's/"//g')
            aws ssm put-parameter --name /prod/web/amiid --type String --overwrite --allowed-pattern "^ami-[a-z0-9]{17}$" --value $web_ami_id
            aws ssm put-parameter --name /prod/scheduled/amiid --type String --overwrite --allowed-pattern "^ami-[a-z0-9]{17}$" --value $scheduled_ami_id

      - run:
          name: Start maintenance break in Dynatrace
          command: |
            curl -X POST "https://$DYNATRACE_SERVICE_DOMAIN/api/v1/maintenance?Api-Token=$DYNATRACE_AUTH_TOKEN" \
              -H "Content-Type: application/json" \
              -H "accept: application/json" \
              -d '{
                "id": "'"$CIRCLE_BUILD_NUM"'",
                "type": "Planned",
                "description": "Maintenance break for CircleCI build '"$CIRCLE_BUILD_NUM"'",
                "suppressAlerts": true,
                "suppressProblems": true,
                "scope": {
                    "matches": [
                    {
                      "type": "APPLICATION",
                      "tags": [
                        {
                          "context": "CONTEXTLESS",
                          "key": "prod"
                        }
                      ]
                    }
                  ]
                 },
              "schedule": {
                "type": "Once",
                "timezoneId": "UTC",
                "maintenanceStart": "'"$(date -u +'%F %R')"'",
                "maintenanceEnd": "'"$(date -u --date='30 min' +'%F %R')"'"
              }
            }' > ~/logs/dynatrace_maintenance_start.log 2>&1

      - run:
          name: Update Cloudformation stack
          command: |
            source ~/project/deploy/assume_role.sh > /dev/null 2>&1
            aws cloudformation update-stack \
            --stack-name "prod-asg-lt" \
            --template-body file://../cloudformation/launchtemplate.yml \
            --parameters ParameterKey=WebTargetGroupArn,ParameterValue=/prod/web/public_alb_tg_arn \
              ParameterKey=WebInstanceType,ParameterValue=/prod/web/instance_type \
              ParameterKey=WebHealthCheckGracePeriod,ParameterValue=/prod/web/albgraceperiod \
              ParameterKey=WebAmiImageId,ParameterValue=/prod/web/amiid \
              ParameterKey=SolrTargetGroupArn,ParameterValue=/prod/web/private_alb_tg_arn \
              ParameterKey=ScheduledInstanceType,ParameterValue=/prod/scheduled/instance_type \
              ParameterKey=ScheduledAmiImageId,ParameterValue=/prod/scheduled/amiid \
              ParameterKey=ScheduledHealthCheckGracePeriod,ParameterValue=/prod/scheduled/albgraceperiod \
              ParameterKey=HookTimeout,ParameterValue=/prod/web/lifecycle_hook_timeout \
              ParameterKey=EnvironmentName,ParameterValue=/prod/web/environment_name \
              ParameterKey=EFSFileSystem,ParameterValue=/prod/web/efs_file_system \
              ParameterKey=AsgDesiredSize,ParameterValue=/prod/web/asgdesiredsize \
              ParameterKey=AsgMinSize,ParameterValue=/prod/web/asgminsize \
              ParameterKey=AsgMaxSize,ParameterValue=/prod/web/asgmaxsize > ~/logs/prod_stack_update.log 2>&1
            aws cloudformation wait stack-update-complete --stack-name "prod-asg-lt"
          working_directory: ~/project/deploy
          no_output_timeout: 60m

      - run:
          name: Notify Dynatrace
          command: |
            curl -X POST "https://$DYNATRACE_SERVICE_DOMAIN/api/v1/events?Api-Token=$DYNATRACE_AUTH_TOKEN" \
              -H "Content-Type: application/json" \
              -H "accept: application/json" \
              -d '{
                "eventType": "CUSTOM_DEPLOYMENT",
                "attachRules": {
                    "tagRule": {
                        "meTypes": [
                            "APPLICATION"
                        ],
                        "tags": "prod"
                    }
                },
                "deploymentName": "CircleCI deployment",
                "deploymentVersion": "'"$CIRCLE_SHA1"'",
                "ciBackLink": "'"https://circleci.com/gh/vrk-kpa/opendata/$CIRCLE_BUILD_NUM"'",
                "source": "CircleCI",
                "customProperties": {
                    "CircleCI Build Number": "'"$CIRCLE_BUILD_NUM"'",
                    "Release": "'"$CIRCLE_TAG"'"
                }
            }' > ~/logs/dynatrace_notification.log 2>&1


      - run:
          name: End maintenance break in Dynatrace
          command: |
            curl -X DELETE "https://$DYNATRACE_SERVICE_DOMAIN/api/v1/maintenance/$CIRCLE_BUILD_NUM?Api-Token=$DYNATRACE_AUTH_TOKEN" \
              -H "Content-Type: application/json" \
              -H "accept: application/json" > ~/logs/dynatrace_maintenance_end.log 2>&1
          when: always

      - store_artifacts:
          path: ~/logs

      - slack_notification:
          fail_only: false

workflows:
  build_and_test:
    jobs:
      - clamav-build
      - clamav-deploy:
          requires:
            - clamav-build
          filters:
            branches:
              only: master
      - packer-web
      - ansible-web:
          requires:
            - packer-web
      - cypress-web:
          requires:
            - ansible-web
      - packer-scheduled
      - copy-web-ami:
          requires:
            - cypress-web
            - packer-scheduled
          filters:
            branches:
              only: master
      - copy-scheduled-ami:
          requires:
            - packer-scheduled
            - cypress-web
          filters:
            branches:
              only: master
      - beta-deploy:
          requires:
            - cypress-web
            - packer-scheduled
          filters:
            branches:
              only: master
  prod_deploy:
    jobs:
      - prod-deploy:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
