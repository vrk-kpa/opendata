diff --git a/ckan/config/config_declaration.yaml b/ckan/config/config_declaration.yaml
index 7fae5489e..bcbc63508 100644
--- a/ckan/config/config_declaration.yaml
+++ b/ckan/config/config_declaration.yaml
@@ -886,6 +886,15 @@ groups:
           Controls whether the default search page (``/dataset``) should different
           sorting parameter by default when the request does not specify sort.
 
+      - key: ckan.search.default_include_drafts
+        type: bool
+        default: true
+        example: false
+        description: |
+          Controls whether the default search page (``/dataset``) should include
+          draft datasets visible to the current user or only public datasets
+          visible to everyone.
+
       - key: search.facets
         type: list
         default:
diff --git a/ckan/tests/controllers/test_package.py b/ckan/tests/controllers/test_package.py
index b1991e320..42980cdc2 100644
--- a/ckan/tests/controllers/test_package.py
+++ b/ckan/tests/controllers/test_package.py
@@ -866,6 +866,109 @@ class TestPackageDelete(object):
         assert plugin.calls["delete"] == 2
         assert plugin.calls["after_dataset_delete"] == 2
 
+    def test_search_page_results_draft(self):
+        '''Draft datasets don't show up in dataset search results.'''
+        app = self._get_test_app()
+        org = factories.Organization()
+
+        factories.Dataset(name="dataset-one", title='Dataset One',
+                          owner_org=org['id'], state='draft')
+        factories.Dataset(name="dataset-two", title='Dataset Two')
+        factories.Dataset(name="dataset-three", title='Dataset Three')
+
+        search_url = url_for('dataset.search')
+        search_response = app.get(search_url)
+
+        search_response_html = BeautifulSoup(search_response.body)
+        ds_titles = search_response_html.select('.dataset-list '
+                                                '.dataset-item '
+                                                '.dataset-heading a')
+        ds_titles = [n.string for n in ds_titles]
+
+        assert len(ds_titles) == 2
+        assert 'Dataset One' not in ds_titles
+        assert 'Dataset Two' in ds_titles
+        assert 'Dataset Three' in ds_titles
+
+    def test_user_not_in_organization_cannot_search_draft_datasets(self):
+        app = helpers._get_test_app()
+        user = factories.User()
+        organization = factories.Organization()
+        dataset = factories.Dataset(
+            owner_org=organization['id'],
+            state='draft'
+        )
+        env = {'REMOTE_USER': user['name'].encode('ascii')}
+        search_url = url_for('dataset.search')
+        search_response = app.get(search_url, extra_environ=env)
+
+        search_response_html = BeautifulSoup(search_response.body)
+        ds_titles = search_response_html.select('.dataset-list '
+                                                '.dataset-item '
+                                                '.dataset-heading a')
+        assert [n.string for n in ds_titles] == []
+
+    def test_user_in_organization_can_search_draft_datasets(self):
+        app = helpers._get_test_app()
+        user = factories.User()
+        organization = factories.Organization(
+            users=[{'name': user['id'], 'capacity': 'member'}])
+        dataset = factories.Dataset(
+            title='A private dataset',
+            owner_org=organization['id'],
+            state='draft'
+        )
+        env = {'REMOTE_USER': user['name'].encode('ascii')}
+        search_url = url_for('dataset.search')
+        search_response = app.get(search_url, extra_environ=env)
+
+        search_response_html = BeautifulSoup(search_response.body)
+        ds_titles = search_response_html.select('.dataset-list '
+                                                '.dataset-item '
+                                                '.dataset-heading a')
+        assert [n.string for n in ds_titles] == ['A private dataset']
+
+    def test_user_in_different_organization_cannot_search_draft_datasets(self):
+        app = helpers._get_test_app()
+        user = factories.User()
+        org1 = factories.Organization(
+            users=[{'name': user['id'], 'capacity': 'member'}])
+        org2 = factories.Organization()
+        dataset = factories.Dataset(
+            title='A private dataset',
+            owner_org=org2['id'],
+            state='draft'
+        )
+        env = {'REMOTE_USER': user['name'].encode('ascii')}
+        search_url = url_for('dataset.search')
+        search_response = app.get(search_url, extra_environ=env)
+
+        search_response_html = BeautifulSoup(search_response.body)
+        ds_titles = search_response_html.select('.dataset-list '
+                                                '.dataset-item '
+                                                '.dataset-heading a')
+        assert [n.string for n in ds_titles] == []
+
+    @helpers.change_config('ckan.search.default_include_drafts', 'false')
+    def test_search_default_include_drafts_false(self):
+        app = helpers._get_test_app()
+        user = factories.User()
+        organization = factories.Organization(
+            users=[{'name': user['id'], 'capacity': 'member'}])
+        dataset = factories.Dataset(
+            owner_org=organization['id'],
+            state='draft'
+        )
+        env = {'REMOTE_USER': user['name'].encode('ascii')}
+        search_url = url_for('dataset.search')
+        search_response = app.get(search_url, extra_environ=env)
+
+        search_response_html = BeautifulSoup(search_response.body)
+        ds_titles = search_response_html.select('.dataset-list '
+                                                '.dataset-item '
+                                                '.dataset-heading a')
+        assert [n.string for n in ds_titles] == []
+
 
 @pytest.mark.usefixtures("non_clean_db", "with_request_context")
 class TestResourceNew(object):
diff --git a/ckan/views/dataset.py b/ckan/views/dataset.py
index 854cdb890..37feda94e 100644
--- a/ckan/views/dataset.py
+++ b/ckan/views/dataset.py
@@ -322,6 +322,8 @@ def search(package_type: str) -> str:
         u'extras': search_extras,
         u'include_private': config.get(
             u'ckan.search.default_include_private'),
+        u'include_drafts': asbool(config.get(
+            'ckan.search_default_include_drafts', True)),
     }
     try:
         query = get_action(u'package_search')(context, data_dict)
diff --git a/ckan/views/group.py b/ckan/views/group.py
index 3d901d162..89b3a2af3 100644
--- a/ckan/views/group.py
+++ b/ckan/views/group.py
@@ -325,6 +325,7 @@ def _read(id: Optional[str], limit: int, group_type: str) -> dict[str, Any]:
         u'q': q,
         u'fq': fq,
         u'include_private': True,
+        u'include_drafts': True,
         u'facet.field': list(facets.keys()),
         u'rows': limit,
         u'sort': sort_by,
