name: Build and deploy containers

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test-containers:
    name: Build and test
    uses: ./.github/workflows/test.yml
    secrets: inherit

  detect-changes:
    uses: ./.github/workflows/changes.yml

  build-and-push:
    name: Build and push containers
    runs-on: ubuntu-latest
    needs:
      - build-and-test-containers
      - detect-changes
    permissions:
      id-token: write
      contents: write
    outputs:
      sha: ${{ steps.envtemplate.outputs.commit_sha || github.sha }}


    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./docker/solr/Dockerfile
            context: ./docker/solr
            submodules: ""
            build-frontend: false
            name: solr
            image_tag: SOLR_IMAGE_TAG
            dynatrace: false
            build-container: ${{ needs.detect-changes.outputs.solr == 'true' }}
          - dockerfile: ./docker/nginx/Dockerfile
            context: ./docker/nginx
            submodules: ""
            build-frontend: false
            name: nginx
            image_tag: NGINX_IMAGE_TAG
            dynatrace: true
            build-container: ${{ needs.detect-changes.outputs.nginx == 'true' }}
          - dockerfile: ./drupal/Dockerfile
            context: ./drupal
            submodules: ""
            build-frontend: true
            name: drupal
            image_tag: DRUPAL_IMAGE_TAG
            dynatrace: true
            build-container: ${{ (needs.detect-changes.outputs.drupal == 'true') || (needs.detect-changes.outputs.assets == 'true') }}
          - dockerfile: ./ckan/Dockerfile
            context: ./ckan
            submodules: recursive
            build-frontend: true
            name: ckan
            image_tag: CKAN_IMAGE_TAG
            dynatrace: true
            build-container: ${{ (needs.detect-changes.outputs.ckan == 'true') || (needs.detect-changes.outputs.assets == 'true') }}

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: ${{ matrix.submodules }}
          token: ${{ secrets.BOT_TOKEN }}

      - name: setup docker buildx
        uses: docker/setup-buildx-action@v1

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_BUILD_ROLE }}
          role-session-name: github-actions
          aws-region: eu-west-1

      - name: login to AWS ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v1

      - name: login to DynaTrace Registry
        id: login-dtr
        if: ${{ matrix.dynatrace == true && matrix.build-container == true }}
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DYNATRACE_USERNAME }}.live.dynatrace.com
          username: ${{ secrets.DYNATRACE_USERNAME }}
          password: ${{ secrets.DYNATRACE_TOKEN }}

      - name: configure NPM credentials
        if: ${{ matrix.build-frontend == true && matrix.build-container == true }}
        run: |
          cat <<EOT >> ./opendata-assets/.npmrc
          @fortawesome:registry=https://npm.fontawesome.com/
          //npm.fontawesome.com/:_authToken=$NPM_TOKEN
          EOT
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: install nodejs v16
        if: ${{ matrix.build-frontend == true && matrix.build-container == true }}
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: opendata-assets/package-lock.json

      - name: install npm packages
        if: ${{ matrix.build-frontend == true && matrix.build-container == true }}
        run: npm ci
        working-directory: ./opendata-assets

      - name: build frontend with gulp
        if: ${{ matrix.build-frontend == true && matrix.build-container == true }}
        run: npx gulp
        working-directory: ./opendata-assets

      - name: build images
        uses: docker/build-push-action@v3
        if: ${{ matrix.build-container == true }}
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.login.outputs.registry }}/opendata/${{ matrix.name }}:${{ github.sha }}
            ${{ steps.login.outputs.registry }}/opendata/${{ matrix.name }}:latest

      - name: build images with dynatrace
        if: ${{ matrix.dynatrace == true  && matrix.build-container == true }}
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          build-args: |
            DYNATRACE_ENABLED=1
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.login.outputs.registry }}/opendata/${{ matrix.name }}:${{ github.sha }}-dynatrace
            ${{ steps.login.outputs.registry }}/opendata/${{ matrix.name }}:latest-dynatrace

      - name: Update .env.template to reference new images
        if: ${{ matrix.build-container == true }}
        run: |
          sed -i.bak -E 's/^(${{ matrix.image_tag }}[[:blank:]]*=[[:blank:]]*).*/\1\"'"${{ github.sha }}"'\"/' docker/.env.template

      - name: Commit updated .env.template
        id: envtemplate
        if: ${{ matrix.build-container == true }}
        run: |
          git config user.name "YTP Bot"
          git config user.email "yhteentoimivuus.kehittajat@gofore.com"
          git add docker/.env.template
          git commit -m ".env.template updated by new image tags"
          git push


  deploy-beta:
    name: deploy-beta
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs:
      - build-and-test-containers
      - build-and-push
    concurrency:
      group: ${{ github.ref }}/deploy-beta
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.build-and-push.outputs.sha }}

      - name: install nodejs v16
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: cache node_modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node_cdk_v16-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_cdk_v16-

      - name: install cdk npm packages and verify installation
        working-directory: cdk
        run: |
          npm install
          $(npm bin)/cdk doctor

      - name: configure environment
        shell: bash
        run: |
          # configure docker
          cp -f docker/.env.template docker/.env
          sed -i.bak -E 's/^(REGISTRY[[:blank:]]*=[[:blank:]]*).*/\1\"'"${REGISTRY}"'\"/' docker/.env
          sed -i.bak -E 's/^(REPOSITORY[[:blank:]]*=[[:blank:]]*).*/\1\"'"${REPOSITORY}"'\"/' docker/.env
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
          REPOSITORY: ${{ secrets.REPOSITORY }}

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_DEV_ROLE }}
          role-session-name: github-actions
          aws-region: eu-west-1

      - name: build cdk project
        working-directory: cdk
        run: |
          npm run build

      - name: synthesize cdk stacks
        working-directory: cdk
        run: |
          $(npm bin)/cdk synth WebStack-beta --quiet >/dev/null 2>&1

      - name: deploy cdk stacks
        working-directory: cdk
        run: |
          $(npm bin)/cdk deploy WebStack-beta --require-approval=never > /tmp/deploy.log 2>&1

      - name: upload log artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: deploy-logs
          path: /tmp/deploy.log

      - name: Notify Zulip
        uses: zulip/github-actions-zulip/send-message@v1
        with:
          api-key: ${{ secrets.ZULIP_API_KEY }}
          email: 'avoindata-bot@turina.dvv.fi'
          organization-url: 'https://turina.dvv.fi'
          to: 'avoindata.fi'
          type: 'stream'
          topic: 'Beta Deployments'
          content: 'Beta deployment succeeded! (${{ github.event.head_commit.message }})'
